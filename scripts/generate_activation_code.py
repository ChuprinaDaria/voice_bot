import secrets
import sys
import os
import uuid

# –î–æ–¥–∞—î–º–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫—É –ø–∞–ø–∫—É –¥–æ path —â–æ–± —ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –º–æ–¥—É–ª—ñ
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

from storage.database import SessionLocal, init_db
from storage.models import ActivationCode


def get_device_id() -> str:
    """–û—Ç—Ä–∏–º—É—î —É–Ω—ñ–∫–∞–ª—å–Ω–∏–π ID –ø—Ä–∏—Å—Ç—Ä–æ—é (MAC address)"""
    try:
        # –ù–∞ Pi –º–æ–∂–Ω–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ä–µ–∞–ª—å–Ω–∏–π MAC
        import subprocess

        mac = subprocess.check_output("cat /sys/class/net/eth0/address", shell=True)
        return mac.decode().strip().replace(":", "").upper()
    except Exception:
        # Fallback - –≥–µ–Ω–µ—Ä—É—î–º–æ UUID
        return uuid.uuid4().hex[:12].upper()


def generate_code() -> str:
    """–ì–µ–Ω–µ—Ä—É—î –∫—Ä–∞—Å–∏–≤–∏–π –∫–æ–¥ —Ç–∏–ø—É VBOT-A3K9-L2M7-X8Q4"""
    parts = []
    for _ in range(4):
        part = secrets.token_hex(2).upper()  # 4 —Å–∏–º–≤–æ–ª–∏ (hex -> 2 –±–∞–π—Ç–∏)
        parts.append(part)
    return f"VBOT-{'-'.join(parts)}"


def main() -> None:
    """–ì–µ–Ω–µ—Ä—É—î –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é"""
    print("\n" + "=" * 50)
    print("ü§ñ VOICEBOT - –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∫–æ–¥—É –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó")
    print("=" * 50 + "\n")

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ë–î
    init_db()
    db = SessionLocal()

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î –∫–æ–¥ –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é
    device_id = get_device_id()
    existing = db.query(ActivationCode).filter(ActivationCode.device_id == device_id).first()

    if existing:
        print("‚ö†Ô∏è  –ö–æ–¥ –¥–ª—è —Ü—å–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é –≤–∂–µ —ñ—Å–Ω—É—î:")
        print(f"   Device ID: {existing.device_id}")
        print(f"   Code: {existing.code}")
        print(f"   Status: {'‚úÖ Activated' if existing.is_activated else '‚è≥ Not activated'}")

        response = input("\n–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–¥? (yes/no): ")
        if response.lower() != "yes":
            print("‚ùå –°–∫–∞—Å–æ–≤–∞–Ω–æ")
            db.close()
            return

        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞—Ä–∏–π
        db.delete(existing)
        db.commit()

    # –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–æ–≤–∏–π –∫–æ–¥
    code = generate_code()

    activation = ActivationCode(code=code, device_id=device_id, is_activated=False)

    db.add(activation)
    db.commit()

    print("\n" + "=" * 50)
    print("‚úÖ –ù–û–í–ò–ô –ö–û–î –°–¢–í–û–†–ï–ù–û")
    print("=" * 50)
    print(f"Device ID:  {device_id}")
    print(f"Code:       {code}")
    print("=" * 50)
    print("\nüìã –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:")
    print("1. –ù–∞–¥—Ä—É–∫—É–π —Ü–µ–π –∫–æ–¥ –Ω–∞ –Ω–∞–∫–ª–µ–π—Ü—ñ")
    print("2. –ü—Ä–∏–∫–ª–µ–π –Ω–∞ –∫–æ—Ä–æ–±–∫—É –ø—Ä–∏—Å—Ç—Ä–æ—é")
    print("3. –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–µ–¥–µ —Ü–µ–π –∫–æ–¥ –≤ Telegram –±–æ—Ç—ñ\n")

    db.close()


if __name__ == "__main__":
    main()