import os
import argparse
import qrcode
from qrcode.constants import ERROR_CORRECT_L


def generate_bot_qr(bot_username):
    """–ì–µ–Ω–µ—Ä—É—î QR –∫–æ–¥ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –±–æ—Ç–∞"""

    # Deep link –Ω–∞ –±–æ—Ç–∞
    bot_link = f"https://t.me/{bot_username}?start=welcome"

    # –°—Ç–≤–æ—Ä—é—î–º–æ QR
    qr = qrcode.QRCode(
        version=1,
        error_correction=ERROR_CORRECT_L,
        box_size=10,
        border=4,
    )
    qr.add_data(bot_link)
    qr.make(fit=True)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–∞—Ä—Ç–∏–Ω–∫—É
    img = qr.make_image(fill_color="black", back_color="white")
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–µ—Ä–µ–∑ qrcode image API —É –¥–≤—ñ–π–∫–æ–≤–∏–π –ø–æ—Ç—ñ–∫
    with open("bot_qr_code.png", "wb") as f:
        img.save(f, kind="PNG")

    print("‚úÖ QR –∫–æ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π: bot_qr_code.png")
    print(f"üì± –õ—ñ–Ω–∫: {bot_link}")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ì–µ–Ω–µ—Ä–∞—Ü—ñ—è QR-–∫–æ–¥—É –¥–ª—è Telegram –±–æ—Ç–∞")
    parser.add_argument("--username", dest="username", help="username –±–æ—Ç–∞ –±–µ–∑ @")
    args = parser.parse_args()

    username = args.username or os.getenv("BOT_USERNAME")
    if not username:
        try:
            username = input("–í–≤–µ–¥–∏ username —Ç–≤–æ–≥–æ –±–æ—Ç–∞ (–±–µ–∑ @): ")
        except EOFError:
            raise SystemExit(
                "–ù–µ –≤–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ username. –ü–µ—Ä–µ–¥–∞–π --username –∞–±–æ –∑–º—ñ–Ω–Ω—É –æ—Ç–æ—á–µ–Ω–Ω—è BOT_USERNAME."
            )

    if not username:
        raise SystemExit("Username –±–æ—Ç–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π. –ü–µ—Ä–µ–¥–∞–π –∫–æ—Ä–µ–∫—Ç–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")

    generate_bot_qr(username)


