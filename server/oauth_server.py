from __future__ import annotations

import os
from typing import Optional

import uvicorn
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import JSONResponse
from config import get_settings


app = FastAPI(title="VoiceBot OAuth Server")
settings = get_settings()


@app.get("/")
async def root() -> dict[str, object]:
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ OAuth —Å–µ—Ä–≤–µ—Ä–∞"""
    return {
        "service": "VoiceBot OAuth Server",
        "domain": settings.domain,
        "endpoints": {
            "spotify": f"https://{settings.domain}/spotify/callback",
            "google": f"https://{settings.domain}/google/callback",
        },
    }


@app.get("/spotify/callback")
async def spotify_callback(request: Request) -> dict[str, object]:
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ Spotify OAuth.
    –ü—Ä–∏–π–º–∞—î–º–æ ?code=...&state=... —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    """
    params = dict(request.query_params)
    code: Optional[str] = params.get("code")
    state: Optional[str] = params.get("state")
    error: Optional[str] = params.get("error")

    if error:
        raise HTTPException(status_code=400, detail={
            "status": "error",
            "provider": "spotify",
            "error": error,
            "message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥—Ö–∏–ª–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∞–±–æ —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞",
        })

    if not code or not state:
        raise HTTPException(status_code=400, detail={
            "status": "error",
            "provider": "spotify",
            "message": "–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–¥ –∞–±–æ state",
        })

    # TODO: –û–±–º—ñ–Ω—è—Ç–∏ code –Ω–∞ —Ç–æ–∫–µ–Ω–∏
    # telegram_user_id = int(state)
    # spotify_manager.exchange_code_for_tokens(telegram_user_id, code)

    return {
        "status": "success",
        "provider": "spotify",
        "message": "‚úÖ Spotify –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ! –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ Telegram –±–æ—Ç–∞.",
        "received_code": bool(code),
        "state": state,
    }


@app.get("/google/callback")
async def google_callback(request: Request) -> dict[str, object]:
    """–û–±—Ä–æ–±–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –≤—ñ–¥ Google OAuth.
    –ü—Ä–∏–π–º–∞—î–º–æ ?code=...&state=... —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–æ—Ç–∫—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å.
    """
    params = dict(request.query_params)
    code: Optional[str] = params.get("code")
    state: Optional[str] = params.get("state")
    error: Optional[str] = params.get("error")

    if error:
        raise HTTPException(status_code=400, detail={
            "status": "error",
            "provider": "google",
            "error": error,
            "message": "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—ñ–¥—Ö–∏–ª–∏–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –∞–±–æ —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞",
        })

    if not code or not state:
        raise HTTPException(status_code=400, detail={
            "status": "error",
            "provider": "google",
            "message": "–í—ñ–¥—Å—É—Ç–Ω—ñ–π –∫–æ–¥ –∞–±–æ state",
        })

    # TODO: –û–±–º—ñ–Ω—è—Ç–∏ code –Ω–∞ —Ç–æ–∫–µ–Ω–∏
    # telegram_user_id = int(state)
    # google_calendar_manager.exchange_code_for_tokens(telegram_user_id, code)

    return {
        "status": "success",
        "provider": "google",
        "message": "‚úÖ Google Calendar –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ! –ü–æ–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –≤ Telegram –±–æ—Ç–∞.",
        "received_code": bool(code),
        "state": state,
    }


def run_server() -> None:
    """–ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ –∑ SSL –∞–±–æ HTTP fallback"""
    force_http = os.getenv("OAUTH_SERVER_HTTP", "0") == "1"

    def run_http() -> None:
        print(f"üåê OAuth —Å–µ—Ä–≤–µ—Ä (HTTP) ‚Üí http://0.0.0.0:8000")
        print(f"   –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ—ó —Ä–æ–∑—Ä–æ–±–∫–∏")
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=8000,
            log_level="info",
            proxy_headers=True,
            forwarded_allow_ips="*",
        )

    if force_http:
        run_http()
        return

    # –®–ª—è—Ö –¥–æ SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤ Let's Encrypt
    ssl_cert = f"/etc/letsencrypt/live/{settings.domain}/fullchain.pem"
    ssl_key = f"/etc/letsencrypt/live/{settings.domain}/privkey.pem"

    if not (os.path.exists(ssl_cert) and os.path.exists(ssl_key)):
        print(f"‚ùå SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –¥–ª—è {settings.domain}!")
        print(f"   –û—á—ñ–∫—É—î—Ç—å—Å—è: {ssl_cert}")
        print(f"   –ó–≥–µ–Ω–µ—Ä—É–π—Ç–µ —á–µ—Ä–µ–∑: sudo certbot certonly --standalone -d {settings.domain}")
        print("‚û°Ô∏è  –§–æ–ª–±–µ–∫ –Ω–∞ HTTP (–ø–æ—Ä—Ç 8000)")
        run_http()
        return

    try:
        print(f"‚úÖ OAuth —Å–µ—Ä–≤–µ—Ä (HTTPS) ‚Üí https://{settings.domain}")
        uvicorn.run(
            app,
            host="0.0.0.0",
            port=8443,
            ssl_keyfile=ssl_key,
            ssl_certfile=ssl_cert,
            log_level="info",
            proxy_headers=True,
            forwarded_allow_ips="*",
        )
    except PermissionError:
        print("‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ —á–∏—Ç–∞–Ω–Ω—è SSL –∫–ª—é—á—ñ–≤.")
        print("   –†—ñ—à–µ–Ω–Ω—è: sudo chmod 644 /etc/letsencrypt/live/*/privkey.pem")
        print("   –ê–±–æ –¥–æ–¥–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –≥—Ä—É–ø–∏ ssl-cert")
        print("‚û°Ô∏è  –§–æ–ª–±–µ–∫ –Ω–∞ HTTP (–ø–æ—Ä—Ç 8000)")
        run_http()
    except Exception as exc:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É HTTPS: {exc}")
        print("‚û°Ô∏è  –§–æ–ª–±–µ–∫ –Ω–∞ HTTP (–ø–æ—Ä—Ç 8000)")
        run_http()


