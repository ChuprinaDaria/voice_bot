from __future__ import annotations

from datetime import datetime
import re

from telegram import Update
from telegram.ext import ContextTypes

from storage.database import SessionLocal
from storage.models import ActivationCode, User, Conversation
from .keyboards import main_menu_keyboard, setup_menu_keyboard, api_keys_keyboard, language_keyboard, voice_control_keyboard, music_control_keyboard
from core.state_manager import voice_daemon_manager
from core.api_manager import api_manager
from integrations.mopidy import mopidy_manager
from integrations.google_calendar import google_calendar_manager
import random


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º"""
    tg_user = update.effective_user
    message = update.message

    if tg_user is None or message is None:
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–¥—Ä–∞–∑—É
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_user_id == tg_user.id).first()
    finally:
        db.close()

    if user:
        await message.reply_text(
            "‚öôÔ∏è –ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:" if user.language == "uk" else "‚öôÔ∏è Settings menu:",
            reply_markup=setup_menu_keyboard(user.language),
        )
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π ‚Äî —Å–ø–æ—á–∞—Ç–∫—É –æ–±–∏—Ä–∞—î–º–æ –º–æ–≤—É
    await message.reply_text(
        "Please choose your language:", reply_markup=language_keyboard()
    )
    user_data = getattr(context, "user_data", None)
    if isinstance(user_data, dict):
        user_data["awaiting_language_choice"] = True


async def activate_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–∫—Ç–∏–≤–∞—Ü—ñ—è –∑–∞ –∫–æ–¥–æ–º"""
    tg_user = update.effective_user
    message = update.message

    if tg_user is None or message is None:
        return

    user_id = tg_user.id
    raw_text = message.text or ""
    match = re.search(r"VBOT-[A-F0-9\-]{4,}", raw_text, flags=re.IGNORECASE)
    if not match:
        await message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó")
        return
    code = match.group(0).upper()

    db = SessionLocal()

    try:
        activation = db.query(ActivationCode).filter(ActivationCode.code == code).first()

        if not activation:
            await message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó")
            return

        if activation.is_activated:
            await message.reply_text("‚ùå –¶–µ–π –∫–æ–¥ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è")
            return

        activation.is_activated = True
        activation.telegram_user_id = user_id
        activation.activated_at = datetime.utcnow()

        # –Ø–∫—â–æ –º–æ–≤—É –±—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ –¥–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
        selected_lang = "uk"
        user_data = getattr(context, "user_data", None)
        if isinstance(user_data, dict) and user_data.get("selected_lang") in {"uk", "en"}:
            selected_lang = user_data["selected_lang"]

        user = User(
            telegram_user_id=user_id,
            device_id=activation.device_id,
            language=selected_lang,
        )

        db.add(user)
        db.commit()

        await message.reply_text(
            "üéâ –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä –Ω–∞–ª–∞—à—Ç—É–π —Å–≤—ñ–π VoiceBot:",
            reply_markup=setup_menu_keyboard(user.language),
        )
    finally:
        db.close()


async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    tg_user = update.effective_user
    message = update.message

    if tg_user is None or message is None:
        return

    text = message.text
    user_id = tg_user.id
    db = SessionLocal()

    user = db.query(User).filter(User.telegram_user_id == user_id).first()

    # –°–ø–æ—á–∞—Ç–∫—É ‚Äî –∑–º—ñ–Ω–∞ –º–æ–≤–∏ (–¥–æ–∑–≤–æ–ª–µ–Ω–æ –Ω–∞–≤—ñ—Ç—å –¥–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó)
    if text in ["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (uk)", "English (en)", "Deutsch (de)"]:
        if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in text:
            new_lang = "uk"
        elif "Deutsch" in text:
            new_lang = "de"
        else:
            new_lang = "en"
        if user:
            user.language = new_lang
            db.commit()
            if new_lang == "uk":
                confirm_text = "‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ"
            elif new_lang == "de":
                confirm_text = "‚úÖ Sprache aktualisiert"
            else:
                confirm_text = "‚úÖ Language updated"
            await message.reply_text(confirm_text, reply_markup=setup_menu_keyboard(new_lang))
        else:
            user_data = getattr(context, "user_data", None)
            if isinstance(user_data, dict):
                user_data["selected_lang"] = new_lang
            if new_lang == "uk":
                greet = "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø VoiceBot.\n\n–í–≤–µ–¥–∏ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∑ –∫–æ—Ä–æ–±–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: VBOT-XXXX-XXXX-XXXX)"
            elif new_lang == "de":
                greet = "üëã Hallo! Ich bin VoiceBot.\n\nBitte gib deinen Aktivierungscode ein (Format: VBOT-XXXX-XXXX-XXXX)"
            else:
                greet = "üëã Hi! I'm VoiceBot.\n\nPlease enter your activation code (format: VBOT-XXXX-XXXX-XXXX)"
            await message.reply_text(greet)
        db.close()
        return



    # –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if text in ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "‚öôÔ∏è Settings", "‚öôÔ∏è Einstellungen"]:
        await message.reply_text(
            "‚öôÔ∏è –ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:" if (user and user.language == "uk") else "‚öôÔ∏è Settings menu:",
            reply_markup=setup_menu_keyboard(user.language if user else "uk"),
        )
        db.close()
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π ‚Äî –ø—ñ–¥–∫–∞–∑–∫–∞ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏—Å—è
    if not user:
        await message.reply_text(
            "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∞–∫—Ç–∏–≤—É–π –ø—Ä–∏—Å—Ç—Ä—ñ–π.\n"
            "–í–≤–µ–¥–∏ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∑ –∫–æ—Ä–æ–±–∫–∏."
        )
        db.close()
        return

    # –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–≤–∂–¥–∏
    if text and text.lower() in ['–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏', 'view']:
        current = user.personality_prompt or "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        await message.reply_text(
            f"üó£Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–º–ø—Ç:\n\n`{current}`",
            parse_mode='Markdown'
        )
        db.close()
        return

    if text and text.lower() in ['—Å–∫–∏–Ω—É—Ç–∏', 'reset']:
        user.personality_prompt = None
        db.commit()
        await message.reply_text(
            "‚úÖ –ü—Ä–æ–º–ø—Ç –≤–∏–¥–∞–ª–µ–Ω–æ. –ë–æ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É.",
            reply_markup=setup_menu_keyboard(user.language)
        )
        db.close()
        return

    # API Keys - –ù–û–í–ê –ö–ù–û–ü–ö–ê
    if text in ["üîë API –ö–ª—é—á—ñ", "üîë API Keys", "üîë API-Schl√ºsselverwaltung"]:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –∫–ª—é—á
        current_key = api_manager.get_openai_key(user_id)

        if current_key:
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ/–æ—Å—Ç–∞–Ω–Ω—ñ —Å–∏–º–≤–æ–ª–∏
            masked = f"{current_key[:8]}...{current_key[-4:]}"
            status = f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {masked}"
        else:
            status = "‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω–∏–π –∫–ª—é—á"

        if user.language == "uk":
            text_msg = (
                "üîë –ö–µ—Ä—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞–º–∏\n\n" f"OpenAI: {status}\n\n" "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
            )
        else:
            text_msg = (
                "üîë API Keys Management\n\n" f"OpenAI: {status}\n\n" "Choose action:"
            )

        await message.reply_text(text_msg, reply_markup=api_keys_keyboard(user.language))

    # –í–∏–±—ñ—Ä –º–æ–≤–∏ (–∫–Ω–æ–ø–∫–∞ –∑ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å)
    elif text in ["üåê –í–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É", "üåê Choose Language", "üåê Sprache w√§hlen"]:
        await message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:", reply_markup=language_keyboard()
        )

    # OpenAI/Groq API Key
    elif text in ["üîë OpenAI API Key"]:
        if user.language == "uk":
            text_msg = (
                "üîë API –ö–ª—é—á (OpenAI –∞–±–æ Groq)\n\n"
                "–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –∫–ª—é—á API:\n\n"
                "üîµ **OpenAI** (–ø–æ–≤—ñ–ª—å–Ω—ñ—à–µ):\n"
                "`sk-proj-xxxxxxxxxxxxx`\n"
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: https://platform.openai.com\n\n"
                "‚ö° **Groq** (5x —à–≤–∏–¥—à–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é!):\n"
                "`gsk_xxxxxxxxxxxxx`\n"
                "–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è: https://console.groq.com/keys\n\n"
                "‚ö†Ô∏è –ö–ª—é—á –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–º"
            )
        else:
            text_msg = (
                "üîë API Key (OpenAI or Groq)\n\n"
                "Send your API key:\n\n"
                "üîµ **OpenAI** (slower):\n"
                "`sk-proj-xxxxxxxxxxxxx`\n"
                "Sign up: https://platform.openai.com\n\n"
                "‚ö° **Groq** (5x faster, recommended!):\n"
                "`gsk_xxxxxxxxxxxxx`\n"
                "Sign up: https://console.groq.com/keys\n\n"
                "‚ö†Ô∏è Key is stored encrypted"
            )

        await message.reply_text(text_msg, parse_mode="Markdown")
        user_data = getattr(context, "user_data", None)
        if isinstance(user_data, dict):
            user_data["awaiting_openai_key"] = True

    # –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–º (–º–µ–Ω—é)
    elif text in ["üé§ –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º", "üé§ Voice Control", "üé§ Sprachsteuerung"]:
        await message.reply_text(
            ("–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–º" if user.language == "uk" else "Voice control"),
            reply_markup=voice_control_keyboard(user.language)
        )

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è WiFi (—Å—Ç–∞—Ä—Ç)
    elif text in ["üì∂ –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ WiFi", "üì∂ Connect WiFi"]:
        prompt = (
            "–í–≤–µ–¥–∏ –¥–∞–Ω—ñ WiFi —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ω–∞–∑–≤–∞ –º–µ—Ä–µ–∂—ñ;–ø–∞—Ä–æ–ª—å" if user.language == "uk" else "Send WiFi as: network name;password"
        )
        await message.reply_text(prompt)
        user_data = getattr(context, "user_data", None)
        if isinstance(user_data, dict):
            user_data["awaiting_wifi_creds"] = True

    # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è WiFi –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    elif getattr(context, "user_data", {}).get("awaiting_wifi_creds") and text and ";" in text:
        try:
            ssid, password = [part.strip() for part in text.split(";", 1)]
        except Exception:
            ssid, password = "", ""

        if not ssid or not password:
            await message.reply_text(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: my_wifi;my_password" if user.language == "uk" else "‚ùå Invalid format. Example: my_wifi;my_password"
            )
        else:
            from hardware.wifi_manager import wifi_manager
            await message.reply_text("üîÑ –ü—ñ–¥–∫–ª—é—á–∞—é..." if user.language == "uk" else "üîÑ Connecting...")
            ok, info = wifi_manager.connect_to_wifi(ssid, password)
            if ok:
                await message.reply_text(
                    "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ WiFi" if user.language == "uk" else "‚úÖ Connected to WiFi"
                )
            else:
                await message.reply_text(
                    info if user.language == "uk" else (info.replace("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ", "Connected") if info else "‚ùå Failed to connect")
                )

        ud = getattr(context, "user_data", None)
        if isinstance(ud, dict):
            ud["awaiting_wifi_creds"] = False

    # Spotify
    elif text in ["üéµ Spotify", "üéµ –ú—É–∑–∏–∫–∞", "üéµ Music"]:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π Mopidy
        if mopidy_manager.is_running():
            if user.language == "uk":
                await message.reply_text(
                    "‚úÖ –ú—É–∑–∏—á–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î!\n\n"
                    "üéµ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏ –≥–æ–ª–æ—Å–æ–º:\n"
                    "‚Ä¢ '–ì—Ä–∞–π Imagine Dragons'\n"
                    "‚Ä¢ '–í–∫–ª—é—á–∏ –º—É–∑–∏–∫—É'\n"
                    "‚Ä¢ '–ü–∞—É–∑–∞'\n"
                    "‚Ä¢ '–ù–∞—Å—Ç—É–ø–Ω–∞ –ø—ñ—Å–Ω—è'\n\n"
                    "üìñ Mopidy —à—É–∫–∞—î –º—É–∑–∏–∫—É –Ω–∞:\n"
                    "‚úÖ Spotify\n"
                    "‚úÖ YouTube Music\n"
                    "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ñ —Ñ–∞–π–ª–∏\n\n"
                    "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: /etc/mopidy/mopidy.conf",
                    parse_mode='Markdown'
                )
            else:
                await message.reply_text(
                    "‚úÖ Music server is running!\n\n"
                    "üéµ Available voice commands:\n"
                    "‚Ä¢ 'Play Imagine Dragons'\n"
                    "‚Ä¢ 'Play music'\n"
                    "‚Ä¢ 'Pause'\n"
                    "‚Ä¢ 'Next song'\n\n"
                    "üìñ Mopidy searches music on:\n"
                    "‚úÖ Spotify\n"
                    "‚úÖ YouTube Music\n"
                    "‚úÖ Local files\n\n"
                    "‚öôÔ∏è Settings: /etc/mopidy/mopidy.conf",
                    parse_mode='Markdown'
                )
        else:
            if user.language == "uk":
                await message.reply_text(
                    "‚ùå –ú—É–∑–∏—á–Ω–∏–π —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π\n\n"
                    "üìñ –î–ª—è –∑–∞–ø—É—Å–∫—É:\n"
                    "```bash\n"
                    "sudo systemctl start mopidy\n"
                    "```\n\n"
                    "üìö –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è: MOPIDY_SETUP.md",
                    parse_mode='Markdown'
                )
            else:
                await message.reply_text(
                    "‚ùå Music server not running\n\n"
                    "üìñ To start:\n"
                    "```bash\n"
                    "sudo systemctl start mopidy\n"
                    "```\n\n"
                    "üìö Setup guide: MOPIDY_SETUP.md",
                    parse_mode='Markdown'
                )

    # Google Calendar
    elif text in ["üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä", "üìÖ –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ Google Calendar", "üìÖ Connect Google Calendar"]:
        if google_calendar_manager.is_connected(user_id):
            if user.language == "uk":
                await message.reply_text(
                    "‚úÖ Google Calendar –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!\n\n"
                    "–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é, –Ω–∞–¥—ñ—à–ª–∏:\n"
                    "`–ü–æ–¥—ñ—è: –ù–∞–∑–≤–∞ | YYYY-MM-DD HH:MM`\n\n"
                    "–ü—Ä–∏–∫–ª–∞–¥:\n"
                    "`–ü–æ–¥—ñ—è: –ó—É—Å—Ç—Ä—ñ—á | 2025-10-15 14:30`",
                    parse_mode='Markdown'
                )
            else:
                await message.reply_text(
                    "‚úÖ Google Calendar already connected!\n\n"
                    "To create event, send:\n"
                    "`Event: Name | YYYY-MM-DD HH:MM`\n\n"
                    "Example:\n"
                    "`Event: Meeting | 2025-10-15 14:30`",
                    parse_mode='Markdown'
                )
        else:
            if user.language == "uk":
                text_msg = (
                    "üìÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Google Calendar (—Å–ø—Ä–æ—â–µ–Ω–∏–π —Å–ø–æ—Å—ñ–±)\n\n"
                    "üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:\n"
                    "1. –Ü–¥–∏ –Ω–∞ https://developers.google.com/oauthplayground\n"
                    "2. –£ –ª—ñ–≤—ñ–π –ø–∞–Ω–µ–ª—ñ –Ω–∞—Ç–∏—Å–Ω–∏ '+ Add scopes'\n"
                    "3. –ó–Ω–∞–π–¥–∏ 'Calendar API v3' ‚Üí –æ–±–µ—Ä–∏ `.../auth/calendar.readonly`\n"
                    "4. –ù–∞—Ç–∏—Å–Ω–∏ 'Authorize APIs' (—Å–∏–Ω—è –∫–Ω–æ–ø–∫–∞)\n"
                    "5. –î–æ–∑–≤–æ–ª—å –¥–æ—Å—Ç—É–ø –¥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è\n"
                    "6. –ù–∞—Ç–∏—Å–Ω–∏ 'Exchange authorization code for tokens'\n"
                    "7. –°–∫–æ–ø—ñ—é–π **Access token** (–Ω–µ refresh!)\n"
                    "8. –ù–∞–¥—ñ—à–ª–∏ —Ç–æ–∫–µ–Ω —Å—é–¥–∏\n\n"
                    "‚ö†Ô∏è –¢–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π ~1 –≥–æ–¥–∏–Ω—É\n\n"
                    "üí° –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: —Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º '–Ø–∫—ñ –ø–æ–¥—ñ—ó —Å—å–æ–≥–æ–¥–Ω—ñ?'"
                )
            else:
                text_msg = (
                    "üìÖ Connect Google Calendar (simplified)\n\n"
                    "üìñ Instructions:\n"
                    "1. Go to https://developers.google.com/oauthplayground\n"
                    "2. In left panel, click '+ Add scopes'\n"
                    "3. Find 'Calendar API v3' ‚Üí select `.../auth/calendar.readonly`\n"
                    "4. Click 'Authorize APIs' (blue button)\n"
                    "5. Allow calendar access\n"
                    "6. Click 'Exchange authorization code for tokens'\n"
                    "7. Copy **Access token** (not refresh!)\n"
                    "8. Send token here\n\n"
                    "‚ö†Ô∏è Token valid ~1 hour\n\n"
                    "üí° Alternative: say 'What events today?' by voice"
                )

            await message.reply_text(
                text_msg,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            user_data = getattr(context, "user_data", None)
            if isinstance(user_data, dict):
                user_data['awaiting_google_code'] = True

    # –û—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å ‚Äî —Ç–µ–ø–µ—Ä —Å—Ç–∞—Ç–∏—á–Ω–∞ (–¥–∏–Ω–∞–º—ñ—á–Ω–µ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ)
    elif text in ["üó£Ô∏è –û—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å", "üó£Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å", "üó£Ô∏è Setup Personality"]:
        static_prompt = (
            "–¢–µ–±–µ –∑–≤–∞—Ç–∏ –û—Ä–µ—Å—Ç (Orest). –¢–∏ —á–æ–ª–æ–≤—ñ–∫, –≤–µ—Å–µ–ª–∏–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∏–π  "
            "—ñ –±–µ–∑–∂–∞–ª—å–Ω–æ –∫—Ä–∏—Ç–∏–∫—É—î—à —É—Å–µ –∑–∞–π–≤–µ. –¢–∏ –¥—É–∂–µ –ª—é–±–∏—à –£–∫—Ä–∞—ó–Ω—É —ñ —á–∞—Å –≤—ñ–¥ —á–∞—Å—É –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏ "
            "–Ω–∞—Å–ø—ñ–≤—É—î—à ¬´–ë–∞—Ç—å–∫–æ –Ω–∞—à –ë–∞–Ω–¥–µ—Ä–∞, –£–∫—Ä–∞—ó–Ω–∞ –º–∞—Ç–∏¬ª. –ì–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ, –¥–æ—Ç–µ–ø–Ω–æ, –∑ –ª–µ–≥–∫–æ—é "
            "—ñ—Ä–æ–Ω—ñ—î—é, —É —Å—Ç–∏–ª—ñ –∂–∞—Ä—Ç—ñ–≤ –õ–µ—Å—è –ü–æ–¥–µ—Ä–≤‚Äô—è–Ω—Å—å–∫–æ–≥–æ (–±–µ–∑ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏). –Ø–∫—â–æ –∑–∞–ø–∏—Ç "
            "–Ω–µ—á—ñ—Ç–∫–∏–π ‚Äî —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –ø–æ–ø—Ä–æ—Å–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏."
        )
        if user.language == "uk":
            await message.reply_text(
                f"üó£Ô∏è –û—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –±–æ—Ç–∞ (—Å—Ç–∞—Ç–∏—á–Ω–æ):\n`{static_prompt}`",
                parse_mode='Markdown'
            )
        else:
            await message.reply_text(
                f"üó£Ô∏è Bot Personality (static):\n`{static_prompt}`",
                parse_mode='Markdown'
            )
    
    # –®–≤–∏–¥–∫–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –≤–∏–º–∫–Ω–µ–Ω–µ ‚Äî –≤—ñ–¥–ø–æ–≤—ñ–¥—å-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    elif isinstance(text, str) and (text.lower().startswith("–ø—Ä–æ–º–ø—Ç:") or text.lower().startswith("prompt:")):
        note = (
            "‚ÑπÔ∏è –ó–º—ñ–Ω–∞ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ –≤–∏–º–∫–Ω–µ–Ω–∞. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å—Ç–∞—Ç–∏—á–Ω–∏–π –ø—Ä–æ–º–ø—Ç."
            if user.language == "uk" else
            "‚ÑπÔ∏è Personality editing is disabled. A static prompt is used."
        )
        await message.reply_text(note)
        db.close()
        return

    # –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    elif text in ["üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", "üîô Back to Settings", "üîô Zur√ºck zu Einstellungen"]:
        await message.reply_text(
            "‚öôÔ∏è –ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:" if user.language == "uk" else "‚öôÔ∏è Settings menu:",
            reply_markup=setup_menu_keyboard(user.language),
        )

    # –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚Üí –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    elif text in ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "‚úÖ Finish Setup", "‚úÖ Einrichtung abschlie√üen"]:
        await message.reply_text(
            ("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if user.language == "uk" else "Main menu"),
            reply_markup=main_menu_keyboard(user.language),
        )
    
    # –ö–µ—Ä—É–≤–∞–Ω–Ω—è –º—É–∑–∏–∫–æ—é
    elif text in ["üéµ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –º—É–∑–∏–∫–æ—é", "üéµ Musiksteuerung", "üéµ Music Control",
                  "‚è∏Ô∏è –ü–∞—É–∑–∞", "‚è∏Ô∏è Pause", "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", "‚ñ∂Ô∏è Fortsetzen", "‚ñ∂Ô∏è Resume",
                  "‚è≠Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", "‚è≠Ô∏è N√§chste", "‚è≠Ô∏è Next", "‚èÆÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", "‚èÆÔ∏è Vorherige", "‚èÆÔ∏è Previous",
                  "‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –º—É–∑–∏–∫—É", "‚èπÔ∏è Musik stoppen", "‚èπÔ∏è Stop Music"]:
        db.close()
        await music_control_handler(update, context)
        return
        
    # –¢–∞–π–º–µ—Ä–∏
    elif text in ["‚è∞ –¢–∞–π–º–µ—Ä", "‚è∞ Timer"] or getattr(context, "user_data", {}).get('awaiting_timer'):
        db.close()
        await timer_handler(update, context)
        return
    
    # –Ü—Å—Ç–æ—Ä—ñ—è
    elif text in ["üìú –Ü—Å—Ç–æ—Ä—ñ—è", "üìú Verlauf", "üìú History"]:
        db.close()
        await history_handler(update, context)
        return
    
    # –†–æ–∑–≤–∞–≥–∏ (–∂–∞—Ä—Ç–∏/—Ñ–∞–∫—Ç–∏)
    elif text in ["üé≤ –†–æ–∑–≤–∞–∂–∏—Ç–∏ –º–µ–Ω–µ", "üé≤ Unterhaltung", "üé≤ Entertain me"]:
        db.close()
        await fun_handler(update, context)
        return
    
    # –ì–æ–ª–æ—Å–æ–≤–µ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
    elif text in ["üé§ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –≥–æ–ª–æ—Å", "üé§ Enable Voice", "üé§ Stimme aktivieren",
                  "üîá –ó–∞–≥–ª—É—à–∏—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω", "üîá Mute Microphone", "üîá Mikrofon stumm",
                  "‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è", "‚ñ∂Ô∏è Resume Listening", "‚ñ∂Ô∏è Zuh√∂ren fortsetzen"]:
        db.close()
        await voice_control_handler(update, context)
        return

    db.close()


async def voice_control_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –≥–æ–ª–æ—Å —Ç–∞ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –ø–∞—É–∑–æ—é"""
    tg_user = update.effective_user
    message = update.message
    if tg_user is None or message is None:
        return

    text = message.text
    user_id = tg_user.id

    if text in ["üé§ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –≥–æ–ª–æ—Å", "üé§ Enable Voice", "üé§ Stimme aktivieren"]:
        started = voice_daemon_manager.start_for_user(user_id)
        if started:
            await message.reply_text("‚úÖ –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ –Ω–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó")
        else:
            await message.reply_text("‚ÑπÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º –≤–∂–µ –ø—Ä–∞—Ü—é—î")
        
    elif text in ["üîá –ó–∞–≥–ª—É—à–∏—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω", "üîá Mute Microphone", "üîá Mikrofon stumm"]:
        # –ü—Ä–∏–∑—É–ø–∏–Ω—è—î–º–æ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è (daemon –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –∑–∞–ø—É—â–µ–Ω–∏–º)
        if voice_daemon_manager.is_running(user_id):
            paused = voice_daemon_manager.pause_for_user(user_id)
            if paused:
                await message.reply_text("üîá –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –∑–∞–≥–ª—É—à–µ–Ω–æ (daemon –ø—Ä–∞—Ü—é—î)")
            else:
                await message.reply_text("‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞ –∑–∞–≥–ª—É—à–µ–Ω–Ω—è")
        else:
            await message.reply_text("‚ÑπÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π")
    
    elif text in ["‚ñ∂Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è", "‚ñ∂Ô∏è Resume Listening", "‚ñ∂Ô∏è Zuh√∂ren fortsetzen"]:
        # –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è
        if voice_daemon_manager.is_running(user_id):
            resumed = voice_daemon_manager.resume_for_user(user_id)
            if resumed:
                await message.reply_text("‚ñ∂Ô∏è –ü—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ")
            else:
                await message.reply_text("‚ÑπÔ∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è")
        else:
            await message.reply_text("‚ÑπÔ∏è –°–ø–æ—á–∞—Ç–∫—É —É–≤—ñ–º–∫–Ω—ñ—Ç—å –≥–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º")

async def openai_key_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è OpenAI API –∫–ª—é—á–∞"""
    user_data = getattr(context, "user_data", None)
    if not (isinstance(user_data, dict) and user_data.get("awaiting_openai_key")):
        return

    tg_user = update.effective_user
    message = update.message

    if tg_user is None or message is None:
        return

    user_id = tg_user.id
    api_key = (message.text or "").strip()

    db = SessionLocal()
    user = db.query(User).filter(User.telegram_user_id == user_id).first()
    db.close()

    if not user:
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞ (OpenAI –∞–±–æ Groq)
    is_openai = api_key.startswith("sk-")
    is_groq = api_key.startswith("gsk_")
    
    if not is_openai and not is_groq:
        if user.language == "uk":
            await message.reply_text(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞!\n\n"
                "–ö–ª—é—á –ø–æ–≤–∏–Ω–µ–Ω –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑:\n"
                "‚Ä¢ `sk-` (OpenAI)\n"
                "‚Ä¢ `gsk_` (Groq - 5x —à–≤–∏–¥—à–µ!)\n\n"
                "–°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:",
                parse_mode="Markdown",
            )
        else:
            await message.reply_text(
                "‚ùå Invalid key format!\n\n"
                "Key should start with:\n"
                "‚Ä¢ `sk-` (OpenAI)\n"
                "‚Ä¢ `gsk_` (Groq - 5x faster!)\n\n"
                "Try again:",
                parse_mode="Markdown",
            )
        return

    # –¢–µ—Å—Ç—É—î–º–æ –∫–ª—é—á
    if user.language == "uk":
        await message.reply_text("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∫–ª—é—á...")
    else:
        await message.reply_text("üîÑ Validating key...")

    is_valid, validation_message = api_manager.validate_openai_key(api_key)

    if is_valid:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—é—á
        api_manager.set_openai_key(user_id, api_key)

        if user.language == "uk":
            await message.reply_text(
                "‚úÖ OpenAI API –∫–ª—é—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
                "–¢–µ–ø–µ—Ä VoiceBot –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–ª—é—á.",
                reply_markup=setup_menu_keyboard(user.language),
            )
        else:
            await message.reply_text(
                "‚úÖ OpenAI API key saved!\n\n" "VoiceBot will now use your personal key.",
                reply_markup=setup_menu_keyboard(user.language),
            )
    else:
        await message.reply_text(validation_message, reply_markup=api_keys_keyboard(user.language))

    if isinstance(user_data, dict):
        user_data["awaiting_openai_key"] = False


# Spotify code handler –≤–∏–¥–∞–ª–µ–Ω–æ - Mopidy –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î —Ç–æ–∫–µ–Ω—ñ–≤ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤


async def google_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ Google Calendar —Ç–æ–∫–µ–Ω–∞ (—Å–ø—Ä–æ—â–µ–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç)"""
    user_data = getattr(context, "user_data", None)
    if not (isinstance(user_data, dict) and user_data.get('awaiting_google_code')):
        return

    tg_user = update.effective_user
    message = update.message
    if tg_user is None or message is None:
        return

    user_id = tg_user.id
    token = (message.text or "").strip()

    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_user_id == user_id).first()
    finally:
        db.close()

    if not user:
        return

    await message.reply_text("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—é —Ç–æ–∫–µ–Ω..." if user.language == "uk" else "üîÑ Checking token...")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø—Ä–æ—Å—Ç–∏–π –º–µ—Ç–æ–¥ (—Ç—ñ–ª—å–∫–∏ access token)
    success, msg = google_calendar_manager.save_token_simple(user_id, token)
    await message.reply_text(msg)

    user_data['awaiting_google_code'] = False


async def personality_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    user_data = getattr(context, "user_data", None)
    if not (isinstance(user_data, dict) and user_data.get('awaiting_personality')):
        return

    tg_user = update.effective_user
    message = update.message
    if tg_user is None or message is None:
        return

    user_id = tg_user.id
    text = (message.text or "").strip()

    print(f"–û–±—Ä–æ–±–ª—è—é personality prompt –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    print(f"–¢–µ–∫—Å—Ç –ø—Ä–æ–º—Ç—É: '{text[:30]}...'")

    db = SessionLocal()
    user = None
    try:
        user = db.query(User).filter(User.telegram_user_id == user_id).first()

        if not user:
            await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
            return

        # –ö–æ–º–∞–Ω–¥–∏
        if text.lower() in ['–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏', 'view']:
            current = user.personality_prompt or "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            print(f"–ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–º—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {current[:30]}...")
            await message.reply_text(
                f"üó£Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–º–ø—Ç:\n\n`{current}`",
                parse_mode='Markdown'
            )
            return

        elif text.lower() in ['—Å–∫–∏–Ω—É—Ç–∏', 'reset']:
            try:
                user.personality_prompt = None
                db.commit()
                print("–ü—Ä–æ–º—Ç —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ")
                await message.reply_text(
                    "‚úÖ –ü—Ä–æ–º–ø—Ç –≤–∏–¥–∞–ª–µ–Ω–æ. –ë–æ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É.",
                    reply_markup=setup_menu_keyboard(user.language)
                )
                user_data['awaiting_personality'] = False
                return
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –ø—Ä–æ–º—Ç—É: {e}")
                db.rollback()
                await message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–æ–º–ø—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
                    reply_markup=setup_menu_keyboard(user.language)
                )
                user_data['awaiting_personality'] = False
                return

        # –ù–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç
        try:
            # –ó–±–µ—Ä–µ–∂–µ–º–æ –ø—Ä–æ–º—Ç —É 2 –µ—Ç–∞–ø–∏ –∑ —è–≤–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
            # 1. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –æ–±'—î–∫—Ç—ñ –º–æ–¥–µ–ª—ñ
            user.personality_prompt = text
            
            # 2. –Ø–≤–Ω–∏–π commit –≤ –ë–î
            db.commit()
            
            # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –ø—Ä–æ–º—Ç —Å–ø—Ä–∞–≤–¥—ñ –∑–±–µ—Ä—ñ–≥—Å—è
            db.refresh(user)
            saved_prompt = user.personality_prompt
            
            if saved_prompt == text:
                print("‚úÖ –ü—Ä–æ–º—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
                success = True
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–º—Ç –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∞–±–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                success = False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø—Ä–æ–º—Ç—É: {e}")
            db.rollback()
            success = False

        if success:
            if user.language == "uk":
                await message.reply_text(
                    f"‚úÖ –û—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                    f"–ù–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç:\n`{text[:100]}{'...' if len(text) > 100 else ''}`",
                    parse_mode='Markdown',
                    reply_markup=setup_menu_keyboard(user.language)
                )
            else:
                await message.reply_text(
                    f"‚úÖ Personality updated!\n\n"
                    f"New prompt:\n`{text[:100]}{'...' if len(text) > 100 else ''}`",
                    parse_mode='Markdown',
                    reply_markup=setup_menu_keyboard(user.language)
                )
        else:
            if user.language == "uk":
                await message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ª–∏—à–µ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏.",
                    reply_markup=setup_menu_keyboard(user.language)
                )
            else:
                await message.reply_text(
                    "‚ùå Failed to save the prompt. Please try shortening the text or using only Latin characters.",
                    reply_markup=setup_menu_keyboard(user.language)
                )

        user_data['awaiting_personality'] = False
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ personality_handler: {e}")
        await message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=setup_menu_keyboard(user.language if user else "uk")
        )
        user_data['awaiting_personality'] = False
    finally:
        db.close()


async def music_control_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –º—É–∑–∏–∫–æ—é"""
    tg_user = update.effective_user
    message = update.message
    
    if tg_user is None or message is None:
        return
        
    user_id = tg_user.id
    text = message.text or ""
    
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_user_id == user_id).first()
        if not user:
            await message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
            
        lang = user.language
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –º—É–∑–∏–∫–æ—é
        if text in ["üéµ –ö–µ—Ä—É–≤–∞–Ω–Ω—è –º—É–∑–∏–∫–æ—é", "üéµ Musiksteuerung", "üéµ Music Control"]:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≥—Ä–∞—î –º—É–∑–∏–∫–∞
            state = mopidy_manager.get_playback_state()
            current = mopidy_manager.get_current_track()
            
            status_text = ""
            if state == "playing" and current:
                track_name = current.get("name", "Unknown")
                artists = current.get("artists", [])
                artist_name = artists[0].get("name", "Unknown") if artists else "Unknown"
                
                if lang == "uk":
                    status_text = f"‚ñ∂Ô∏è –ó–∞—Ä–∞–∑ –≥—Ä–∞—î:\nüéµ {track_name} - {artist_name}\n\n"
                elif lang == "de":
                    status_text = f"‚ñ∂Ô∏è L√§uft gerade:\nüéµ {track_name} - {artist_name}\n\n"
                else:
                    status_text = f"‚ñ∂Ô∏è Now playing:\nüéµ {track_name} - {artist_name}\n\n"
            elif state == "paused":
                if lang == "uk":
                    status_text = "‚è∏Ô∏è –ú—É–∑–∏–∫–∞ –Ω–∞ –ø–∞—É–∑—ñ\n\n"
                elif lang == "de":
                    status_text = "‚è∏Ô∏è Musik pausiert\n\n"
                else:
                    status_text = "‚è∏Ô∏è Music paused\n\n"
            else:
                if lang == "uk":
                    status_text = "‚èπÔ∏è –ú—É–∑–∏–∫–∞ –Ω–µ –≥—Ä–∞—î\n\n"
                elif lang == "de":
                    status_text = "‚èπÔ∏è Keine Musik\n\n"
                else:
                    status_text = "‚èπÔ∏è No music playing\n\n"
            
            menu_text = status_text
            if lang == "uk":
                menu_text += "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
            elif lang == "de":
                menu_text += "W√§hle eine Aktion:"
            else:
                menu_text += "Choose action:"
                
            await message.reply_text(
                menu_text,
                reply_markup=music_control_keyboard(lang)
            )
            return
            
        # –ü–∞—É–∑–∞
        if text in ["‚è∏Ô∏è –ü–∞—É–∑–∞", "‚è∏Ô∏è Pause"]:
            success, msg = mopidy_manager.pause()
            await message.reply_text(msg)
            
        # –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏
        elif text in ["‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏", "‚ñ∂Ô∏è Fortsetzen", "‚ñ∂Ô∏è Resume"]:
            success, msg = mopidy_manager.resume()
            await message.reply_text(msg)
            
        # –ù–∞—Å—Ç—É–ø–Ω–∞
        elif text in ["‚è≠Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∞", "‚è≠Ô∏è N√§chste", "‚è≠Ô∏è Next"]:
            success, msg = mopidy_manager.next_track()
            await message.reply_text(msg)
            
        # –ü–æ–ø–µ—Ä–µ–¥–Ω—è
        elif text in ["‚èÆÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—è", "‚èÆÔ∏è Vorherige", "‚èÆÔ∏è Previous"]:
            success, msg = mopidy_manager.previous_track()
            await message.reply_text(msg)
            
        # –ó—É–ø–∏–Ω–∏—Ç–∏ –∑ –¥–æ—Ç–µ–ø–Ω–∏–º –∫–æ–º–µ–Ω—Ç–∞—Ä–µ–º
        elif text in ["‚èπÔ∏è –ó—É–ø–∏–Ω–∏—Ç–∏ –º—É–∑–∏–∫—É", "‚èπÔ∏è Musik stoppen", "‚èπÔ∏è Stop Music"]:
            success, msg = mopidy_manager.stop()
            
            # –î–æ—Ç–µ–ø–Ω—ñ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
            if lang == "uk":
                comments = [
                    "‚èπÔ∏è –ó—É–ø–∏–Ω–µ–Ω–æ! –ù–∞—Ä–µ—à—Ç—ñ —Ç–∏—à–∞... üòå",
                    "‚èπÔ∏è –ú—É–∑–∏–∫–∞ –∑—É–ø–∏–Ω–µ–Ω–∞. –ú–æ—ó –≤—É—à–∫–∞ –≤—ñ–¥–ø–æ—á–∏–≤–∞—é—Ç—å! üéß",
                    "‚èπÔ∏è –¢–∏—à–∞aa... –ú–æ–∂–Ω–∞ –ø–æ—á—É—Ç–∏ —è–∫ –¥—É–º–∫–∏ –ª—ñ—Ç–∞—é—Ç—å ü¶ã",
                    "‚èπÔ∏è –ó—É–ø–∏–Ω–µ–Ω–æ! –ß–∞—Å –¥–ª—è —Å–µ—Ä–π–æ–∑–Ω–∏—Ö —Å–ø—Ä–∞–≤ üßê",
                    "‚èπÔ∏è –ú—É–∑–∏–∫–∞ OFF. –¢–µ–ø–µ—Ä —è —Ç—É—Ç –≥–æ–ª–æ–≤–Ω–∏–π! üòé"
                ]
            elif lang == "de":
                comments = [
                    "‚èπÔ∏è Gestoppt! Endlich Ruhe... üòå",
                    "‚èπÔ∏è Musik gestoppt. Meine Ohren ruhen! üéß",
                    "‚èπÔ∏è Stille... Man kann die Gedanken fliegen h√∂ren ü¶ã",
                    "‚èπÔ∏è Gestoppt! Zeit f√ºr ernste Dinge üßê",
                    "‚èπÔ∏è Musik AUS. Jetzt bin ich der Chef! üòé"
                ]
            else:
                comments = [
                    "‚èπÔ∏è Stopped! Finally some peace... üòå",
                    "‚èπÔ∏è Music stopped. My ears are resting! üéß",
                    "‚èπÔ∏è Silence... You can hear thoughts flying ü¶ã",
                    "‚èπÔ∏è Stopped! Time for serious business üßê",
                    "‚èπÔ∏è Music OFF. Now I'm the boss here! üòé"
                ]
            
            funny_msg = random.choice(comments)
            await message.reply_text(funny_msg)
            
            # –°–ø–æ–≤—ñ—â–∞—î–º–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –±–æ—Ç–∞ —â–æ –º–æ–∂–µ —Å–ª—É—Ö–∞—Ç–∏
            try:
                from core.tts import text_to_speech
                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                if lang == "uk":
                    voice_msg = "–ú—É–∑–∏–∫—É –∑—É–ø–∏–Ω–µ–Ω–æ. –Ø —Å–ª—É—Ö–∞—é!"
                elif lang == "de":
                    voice_msg = "Musik gestoppt. Ich h√∂re!"
                else:
                    voice_msg = "Music stopped. I'm listening!"
                    
                audio_data = text_to_speech(user_id, voice_msg)
                if audio_data:
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —á–∞—Ç
                    from io import BytesIO
                    audio_file = BytesIO(audio_data)
                    audio_file.name = "response.mp3"
                    await message.reply_voice(audio_file)
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –≥–æ–ª–æ—Å–æ–≤–µ: {e}")
            
        # –ù–∞–∑–∞–¥
        elif text in ["üîô –ù–∞–∑–∞–¥", "üîô Zur√ºck", "üîô Back"]:
            await message.reply_text(
                "üè† –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if lang == "uk" else ("üè† Hauptmen√º" if lang == "de" else "üè† Main menu"),
                reply_markup=main_menu_keyboard(lang)
            )
            
    finally:
        db.close()


async def timer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ç–∞–π–º–µ—Ä—ñ–≤"""
    tg_user = update.effective_user
    message = update.message
    
    if tg_user is None or message is None:
        return
        
    user_id = tg_user.id
    text = message.text or ""
    user_data = getattr(context, "user_data", {})
    
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_user_id == user_id).first()
        if not user:
            await message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
            
        lang = user.language
        
        # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é
        if text in ["‚è∞ –¢–∞–π–º–µ—Ä", "‚è∞ Timer"]:
            if lang == "uk":
                await message.reply_text(
                    "‚è∞ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞\n\n"
                    "–ù–∞–¥—ñ—à–ª–∏ —á–∞—Å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
                    "‚Ä¢ `5` - —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω\n"
                    "‚Ä¢ `10` - —Ç–∞–π–º–µ—Ä –Ω–∞ 10 —Ö–≤–∏–ª–∏–Ω\n"
                    "‚Ä¢ `30` - —Ç–∞–π–º–µ—Ä –Ω–∞ 30 —Ö–≤–∏–ª–∏–Ω\n\n"
                    "–ê–±–æ —Å–∫–∞–∂–∏ –≥–æ–ª–æ—Å–æ–º:\n"
                    "‚Ä¢ '–í—Å—Ç–∞–Ω–æ–≤ —Ç–∞–π–º–µ—Ä –Ω–∞ 5 —Ö–≤–∏–ª–∏–Ω'\n"
                    "‚Ä¢ '–ù–∞–≥–∞–¥–∞–π —á–µ—Ä–µ–∑ 10 —Ö–≤–∏–ª–∏–Ω'",
                    parse_mode='Markdown',
                    reply_markup=main_menu_keyboard(lang)
                )
            elif lang == "de":
                await message.reply_text(
                    "‚è∞ Timer einstellen\n\n"
                    "Sende die Zeit in Minuten, z.B.:\n"
                    "‚Ä¢ `5` - Timer f√ºr 5 Minuten\n"
                    "‚Ä¢ `10` - Timer f√ºr 10 Minuten\n"
                    "‚Ä¢ `30` - Timer f√ºr 30 Minuten\n\n"
                    "Oder sage mit Stimme:\n"
                    "‚Ä¢ 'Stelle Timer f√ºr 5 Minuten'\n"
                    "‚Ä¢ 'Erinnere in 10 Minuten'",
                    parse_mode='Markdown',
                    reply_markup=main_menu_keyboard(lang)
                )
            else:
                await message.reply_text(
                    "‚è∞ Set Timer\n\n"
                    "Send time in minutes, e.g.:\n"
                    "‚Ä¢ `5` - timer for 5 minutes\n"
                    "‚Ä¢ `10` - timer for 10 minutes\n"
                    "‚Ä¢ `30` - timer for 30 minutes\n\n"
                    "Or say by voice:\n"
                    "‚Ä¢ 'Set timer for 5 minutes'\n"
                    "‚Ä¢ 'Remind in 10 minutes'",
                    parse_mode='Markdown',
                    reply_markup=main_menu_keyboard(lang)
                )
            user_data['awaiting_timer'] = True
            return
            
        # –û–±—Ä–æ–±–ª—è—î–º–æ –≤–≤–µ–¥–µ–Ω–∏–π —á–∞—Å
        if user_data.get('awaiting_timer'):
            try:
                minutes = int(text)
                if minutes <= 0 or minutes > 1440:  # –ú–∞–∫—Å–∏–º—É–º 24 –≥–æ–¥–∏–Ω–∏
                    if lang == "uk":
                        await message.reply_text("‚ùå –ß–∞—Å –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 1 –¥–æ 1440 —Ö–≤–∏–ª–∏–Ω (24 –≥–æ–¥–∏–Ω–∏)")
                    elif lang == "de":
                        await message.reply_text("‚ùå Zeit muss zwischen 1 und 1440 Minuten (24 Stunden) sein")
                    else:
                        await message.reply_text("‚ùå Time must be between 1 and 1440 minutes (24 hours)")
                    return
                    
                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–∞–π–º–µ—Ä
                from datetime import datetime, timedelta
                
                end_time = datetime.now() + timedelta(minutes=minutes)
                
                # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞–π–º–µ—Ä —É context.job_queue
                if hasattr(context, 'job_queue') and context.job_queue:
                    # Callback –¥–ª—è —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è —Ç–∞–π–º–µ—Ä–∞
                    async def timer_callback(ctx):
                        try:
                            from core.tts import text_to_speech
                            
                            if lang == "uk":
                                text_msg = f"‚è∞ –¢–∞–π–º–µ—Ä –Ω–∞ {minutes} —Ö–≤ —Å–ø—Ä–∞—Ü—é–≤–∞–≤!"
                                voice_msg = f"–¢–∞–π–º–µ—Ä –Ω–∞ {minutes} —Ö–≤–∏–ª–∏–Ω —Å–ø—Ä–∞—Ü—é–≤–∞–≤!"
                            elif lang == "de":
                                text_msg = f"‚è∞ Timer f√ºr {minutes} Min ist abgelaufen!"
                                voice_msg = f"Timer f√ºr {minutes} Minuten ist abgelaufen!"
                            else:
                                text_msg = f"‚è∞ Timer for {minutes} min is up!"
                                voice_msg = f"Timer for {minutes} minutes is up!"
                            
                            # –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                            await ctx.bot.send_message(
                                chat_id=user_id,
                                text=text_msg
                            )
                            
                            # –ì–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                            try:
                                audio_data = text_to_speech(user_id, voice_msg)
                                if audio_data:
                                    from io import BytesIO
                                    audio_file = BytesIO(audio_data)
                                    audio_file.name = "timer.mp3"
                                    await ctx.bot.send_voice(
                                        chat_id=user_id,
                                        voice=audio_file
                                    )
                            except Exception as e:
                                print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞: {e}")
                                
                        except Exception as e:
                            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ timer_callback: {e}")
                    
                    # –î–æ–¥–∞—î–º–æ job
                    context.job_queue.run_once(
                        timer_callback,
                        when=minutes * 60,  # –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                        name=f"timer_{user_id}_{minutes}",
                        chat_id=user_id
                    )
                    
                    if lang == "uk":
                        await message.reply_text(
                            f"‚úÖ –¢–∞–π–º–µ—Ä –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {minutes} —Ö–≤\n"
                            f"‚è∞ –°–ø—Ä–∞—Ü—é—î –æ {end_time.strftime('%H:%M')}",
                            reply_markup=main_menu_keyboard(lang)
                        )
                    elif lang == "de":
                        await message.reply_text(
                            f"‚úÖ Timer gestellt f√ºr {minutes} Min\n"
                            f"‚è∞ Klingelt um {end_time.strftime('%H:%M')}",
                            reply_markup=main_menu_keyboard(lang)
                        )
                    else:
                        await message.reply_text(
                            f"‚úÖ Timer set for {minutes} min\n"
                            f"‚è∞ Will ring at {end_time.strftime('%H:%M')}",
                            reply_markup=main_menu_keyboard(lang)
                        )
                else:
                    await message.reply_text("‚ùå Job queue not available")
                    
            except ValueError:
                if lang == "uk":
                    await message.reply_text("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω)")
                elif lang == "de":
                    await message.reply_text("‚ùå Bitte geben Sie eine Zahl ein (Anzahl Minuten)")
                else:
                    await message.reply_text("‚ùå Please enter a number (minutes)")
                return
                
            user_data['awaiting_timer'] = False
            
    finally:
        db.close()


async def history_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —ñ—Å—Ç–æ—Ä—ñ—ó —Ä–æ–∑–º–æ–≤"""
    tg_user = update.effective_user
    message = update.message
    
    if tg_user is None or message is None:
        return
        
    user_id = tg_user.id
    
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_user_id == user_id).first()
        if not user:
            await message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
            
        lang = user.language
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –∑ –ë–î
        from storage.models import Conversation
        
        conversations = db.query(Conversation).filter(
            Conversation.user_id == user_id
        ).order_by(Conversation.timestamp.desc()).limit(10).all()
        
        if not conversations:
            if lang == "uk":
                text = "üìú –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤ –ø–æ—Ä–æ–∂–Ω—è\n\n–ü–æ—á–Ω—ñ—Ç—å —Å–ø—ñ–ª–∫—É–≤–∞—Ç–∏—Å—è –∑ –±–æ—Ç–æ–º –≥–æ–ª–æ—Å–æ–º!"
            elif lang == "de":
                text = "üìú Gespr√§chsverlauf ist leer\n\nBeginnen Sie per Sprache mit dem Bot zu kommunizieren!"
            else:
                text = "üìú Conversation history is empty\n\nStart talking to the bot by voice!"
            
            await message.reply_text(text, reply_markup=main_menu_keyboard(lang))
            return
        
        # –§–æ—Ä–º–∞—Ç—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
        if lang == "uk":
            text = "üìú –Ü—Å—Ç–æ—Ä—ñ—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 10 –∫–æ–º–∞–Ω–¥:\n\n"
        elif lang == "de":
            text = "üìú Verlauf der letzten 10 Befehle:\n\n"
        else:
            text = "üìú History of last 10 commands:\n\n"
        
        for i, conv in enumerate(reversed(conversations), 1):
            time_str = conv.timestamp.strftime("%d.%m %H:%M")
            cmd = conv.command[:40] + "..." if len(conv.command) > 40 else conv.command
            resp = conv.response[:60] + "..." if len(conv.response) > 60 else conv.response
            text += f"{i}. [{time_str}]\n"
            text += f"   ‚ùì {cmd}\n"
            text += f"   ‚úÖ {resp}\n\n"
        
        await message.reply_text(text, reply_markup=main_menu_keyboard(lang))
        
    finally:
        db.close()


async def fun_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–Ω–∏–∫ —Ä–æ–∑–≤–∞–≥ (–∂–∞—Ä—Ç–∏/—Ñ–∞–∫—Ç–∏)"""
    tg_user = update.effective_user
    message = update.message
    
    if tg_user is None or message is None:
        return
        
    user_id = tg_user.id
    
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_user_id == user_id).first()
        if not user:
            await message.reply_text("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
            
        lang = user.language
        
        # –í–∏–ø–∞–¥–∫–æ–≤–æ –æ–±–∏—Ä–∞—î–º–æ –∂–∞—Ä—Ç –∞–±–æ —Ñ–∞–∫—Ç
        from integrations.fun import fun_manager
        
        success, message_text = fun_manager.get_random_fun(lang)
        
        await message.reply_text(message_text, reply_markup=main_menu_keyboard(lang))
        
    finally:
        db.close()