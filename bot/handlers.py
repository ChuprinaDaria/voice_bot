from __future__ import annotations

from datetime import datetime
import re

from telegram import Update
from telegram.ext import ContextTypes

from storage.database import SessionLocal
from storage.models import ActivationCode, User
from .keyboards import main_menu_keyboard, setup_menu_keyboard, api_keys_keyboard, language_keyboard, voice_control_keyboard
from core.state_manager import voice_daemon_manager
from core.api_manager import api_manager
from integrations.spotify import spotify_manager
from integrations.google_calendar import google_calendar_manager


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º"""
    tg_user = update.effective_user
    message = update.message

    if tg_user is None or message is None:
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π ‚Äî –ø–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å –æ–¥—Ä–∞–∑—É
    db = SessionLocal()
    try:
        user = db.query(User).filter(User.telegram_user_id == tg_user.id).first()
    finally:
        db.close()

    if user:
        await message.reply_text(
            "‚öôÔ∏è –ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:" if user.language == "uk" else "‚öôÔ∏è Settings menu:",
            reply_markup=setup_menu_keyboard(user.language),
        )
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∏–π ‚Äî —Å–ø–æ—á–∞—Ç–∫—É –æ–±–∏—Ä–∞—î–º–æ –º–æ–≤—É
    await message.reply_text(
        "Please choose your language:", reply_markup=language_keyboard()
    )
    user_data = getattr(context, "user_data", None)
    if isinstance(user_data, dict):
        user_data["awaiting_language_choice"] = True


async def activate_code(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ê–∫—Ç–∏–≤–∞—Ü—ñ—è –∑–∞ –∫–æ–¥–æ–º"""
    tg_user = update.effective_user
    message = update.message

    if tg_user is None or message is None:
        return

    user_id = tg_user.id
    raw_text = message.text or ""
    match = re.search(r"VBOT-[A-F0-9\-]{4,}", raw_text, flags=re.IGNORECASE)
    if not match:
        await message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó")
        return
    code = match.group(0).upper()

    db = SessionLocal()

    try:
        activation = db.query(ActivationCode).filter(ActivationCode.code == code).first()

        if not activation:
            await message.reply_text("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó")
            return

        if activation.is_activated:
            await message.reply_text("‚ùå –¶–µ–π –∫–æ–¥ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è")
            return

        activation.is_activated = True
        activation.telegram_user_id = user_id
        activation.activated_at = datetime.utcnow()

        # –Ø–∫—â–æ –º–æ–≤—É –±—É–ª–æ –≤–∏–±—Ä–∞–Ω–æ –¥–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ó—ó
        selected_lang = "uk"
        user_data = getattr(context, "user_data", None)
        if isinstance(user_data, dict) and user_data.get("selected_lang") in {"uk", "en"}:
            selected_lang = user_data["selected_lang"]

        user = User(
            telegram_user_id=user_id,
            device_id=activation.device_id,
            language=selected_lang,
        )

        db.add(user)
        db.commit()

        await message.reply_text(
            "üéâ –ê–∫—Ç–∏–≤–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!\n\n"
            "–¢–µ–ø–µ—Ä –Ω–∞–ª–∞—à—Ç—É–π —Å–≤—ñ–π VoiceBot:",
            reply_markup=setup_menu_keyboard(user.language),
        )
    finally:
        db.close()


async def settings_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    tg_user = update.effective_user
    message = update.message

    if tg_user is None or message is None:
        return

    text = message.text
    user_id = tg_user.id
    db = SessionLocal()

    user = db.query(User).filter(User.telegram_user_id == user_id).first()

    # –°–ø–æ—á–∞—Ç–∫—É ‚Äî –∑–º—ñ–Ω–∞ –º–æ–≤–∏ (–¥–æ–∑–≤–æ–ª–µ–Ω–æ –Ω–∞–≤—ñ—Ç—å –¥–æ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó)
    if text in ["–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ (uk)", "English (en)", "Deutsch (de)"]:
        if "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞" in text:
            new_lang = "uk"
        elif "Deutsch" in text:
            new_lang = "de"
        else:
            new_lang = "en"
        if user:
            user.language = new_lang
            db.commit()
            if new_lang == "uk":
                confirm_text = "‚úÖ –ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ"
            elif new_lang == "de":
                confirm_text = "‚úÖ Sprache aktualisiert"
            else:
                confirm_text = "‚úÖ Language updated"
            await message.reply_text(confirm_text, reply_markup=setup_menu_keyboard(new_lang))
        else:
            user_data = getattr(context, "user_data", None)
            if isinstance(user_data, dict):
                user_data["selected_lang"] = new_lang
            if new_lang == "uk":
                greet = "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø VoiceBot.\n\n–í–≤–µ–¥–∏ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∑ –∫–æ—Ä–æ–±–∫–∏ (—Ñ–æ—Ä–º–∞—Ç: VBOT-XXXX-XXXX-XXXX)"
            elif new_lang == "de":
                greet = "üëã Hallo! Ich bin VoiceBot.\n\nBitte gib deinen Aktivierungscode ein (Format: VBOT-XXXX-XXXX-XXXX)"
            else:
                greet = "üëã Hi! I'm VoiceBot.\n\nPlease enter your activation code (format: VBOT-XXXX-XXXX-XXXX)"
            await message.reply_text(greet)
        db.close()
        return

    # –ü–æ—á–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É (–ª–æ–∫–∞–ª—å–Ω–æ –Ω–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó) ‚Äî –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –±–µ–∑ –µ–º–æ–¥–∑—ñ/–∞–Ω–≥–ª
    normalized = (text or "").strip().lower().replace("üéôÔ∏è", "").strip()
    if normalized in ["–ø–æ—á–∞—Ç–∏ —Ä–æ–∑–º–æ–≤—É", "start conversation"]:
        started = voice_daemon_manager.start_for_user(user_id, listen_immediately=True)
        if started:
            await message.reply_text("‚úÖ –†–µ–∂–∏–º —Ä–æ–∑–º–æ–≤–∏ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó")
        else:
            await message.reply_text("‚ÑπÔ∏è –†–µ–∂–∏–º –≤–∂–µ –∑–∞–ø—É—â–µ–Ω–∏–π")
        db.close()
        return

    # –í—ñ–¥–∫—Ä–∏—Ç–∏ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    if text in ["‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "‚öôÔ∏è Settings", "‚öôÔ∏è Einstellungen"]:
        await message.reply_text(
            "‚öôÔ∏è –ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:" if (user and user.language == "uk") else "‚öôÔ∏è Settings menu:",
            reply_markup=setup_menu_keyboard(user.language if user else "uk"),
        )
        db.close()
        return

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π ‚Äî –ø—ñ–¥–∫–∞–∑–∫–∞ –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏—Å—è
    if not user:
        await message.reply_text(
            "‚ùå –°–ø–æ—á–∞—Ç–∫—É –∞–∫—Ç–∏–≤—É–π –ø—Ä–∏—Å—Ç—Ä—ñ–π.\n"
            "–í–≤–µ–¥–∏ –∫–æ–¥ –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –∑ –∫–æ—Ä–æ–±–∫–∏."
        )
        db.close()
        return

    # –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏ –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ –∑–∞–≤–∂–¥–∏
    if text and text.lower() in ['–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏', 'view']:
        current = user.personality_prompt or "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
        await message.reply_text(
            f"üó£Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–º–ø—Ç:\n\n`{current}`",
            parse_mode='Markdown'
        )
        db.close()
        return

    if text and text.lower() in ['—Å–∫–∏–Ω—É—Ç–∏', 'reset']:
        user.personality_prompt = None
        db.commit()
        await message.reply_text(
            "‚úÖ –ü—Ä–æ–º–ø—Ç –≤–∏–¥–∞–ª–µ–Ω–æ. –ë–æ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É.",
            reply_markup=setup_menu_keyboard(user.language)
        )
        db.close()
        return

    # API Keys - –ù–û–í–ê –ö–ù–û–ü–ö–ê
    if text in ["üîë API –ö–ª—é—á—ñ", "üîë API Keys", "üîë API-Schl√ºsselverwaltung"]:
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –∫–ª—é—á
        current_key = api_manager.get_openai_key(user_id)

        if current_key:
            # –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –ø–µ—Ä—à—ñ/–æ—Å—Ç–∞–Ω–Ω—ñ —Å–∏–º–≤–æ–ª–∏
            masked = f"{current_key[:8]}...{current_key[-4:]}"
            status = f"‚úÖ –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {masked}"
        else:
            status = "‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Å–∏—Å—Ç–µ–º–Ω–∏–π –∫–ª—é—á"

        if user.language == "uk":
            text_msg = (
                "üîë –ö–µ—Ä—É–≤–∞–Ω–Ω—è API –∫–ª—é—á–∞–º–∏\n\n" f"OpenAI: {status}\n\n" "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:"
            )
        else:
            text_msg = (
                "üîë API Keys Management\n\n" f"OpenAI: {status}\n\n" "Choose action:"
            )

        await message.reply_text(text_msg, reply_markup=api_keys_keyboard(user.language))

    # –í–∏–±—ñ—Ä –º–æ–≤–∏ (–∫–Ω–æ–ø–∫–∞ –∑ –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å)
    elif text in ["üåê –í–∏–±—Ä–∞—Ç–∏ –º–æ–≤—É", "üåê Choose Language", "üåê Sprache w√§hlen"]:
        await message.reply_text(
            "–û–±–µ—Ä—ñ—Ç—å –º–æ–≤—É / Choose language:", reply_markup=language_keyboard()
        )

    # OpenAI API Key
    elif text in ["üîë OpenAI API Key"]:
        if user.language == "uk":
            text_msg = (
                "üîë OpenAI API Key\n\n"
                "–ù–∞–¥—ñ—à–ª–∏ —Å–≤—ñ–π –∫–ª—é—á API —É —Ñ–æ—Ä–º–∞—Ç—ñ:\n"
                "`sk-proj-xxxxxxxxxxxxx`\n\n"
                "üìñ –î–µ –≤–∑—è—Ç–∏ –∫–ª—é—á?\n"
                "1. –Ü–¥–∏ –Ω–∞ https://platform.openai.com\n"
                "2. Account ‚Üí API Keys\n"
                "3. Create new secret key\n"
                "4. –°–∫–æ–ø—ñ—é–π —ñ –Ω–∞–¥—ñ—à–ª–∏ —Å—é–¥–∏\n\n"
                "‚ö†Ô∏è –ö–ª—é—á –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–º"
            )
        else:
            text_msg = (
                "üîë OpenAI API Key\n\n"
                "Send your API key in format:\n"
                "`sk-proj-xxxxxxxxxxxxx`\n\n"
                "üìñ Where to get the key?\n"
                "1. Go to https://platform.openai.com\n"
                "2. Account ‚Üí API Keys\n"
                "3. Create new secret key\n"
                "4. Copy and send here\n\n"
                "‚ö†Ô∏è Key is stored encrypted"
            )

        await message.reply_text(text_msg, parse_mode="Markdown")
        user_data = getattr(context, "user_data", None)
        if isinstance(user_data, dict):
            user_data["awaiting_openai_key"] = True

    # –ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–º (–º–µ–Ω—é)
    elif text in ["üé§ –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º", "üé§ Voice Control", "üé§ Sprachsteuerung"]:
        await message.reply_text(
            ("–ö–µ—Ä—É–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å–æ–º" if user.language == "uk" else "Voice control"),
            reply_markup=voice_control_keyboard(user.language)
        )

    # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è WiFi (—Å—Ç–∞—Ä—Ç)
    elif text in ["üì∂ –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ WiFi", "üì∂ Connect WiFi"]:
        prompt = (
            "–í–≤–µ–¥–∏ –¥–∞–Ω—ñ WiFi —É —Ñ–æ—Ä–º–∞—Ç—ñ: –Ω–∞–∑–≤–∞ –º–µ—Ä–µ–∂—ñ;–ø–∞—Ä–æ–ª—å" if user.language == "uk" else "Send WiFi as: network name;password"
        )
        await message.reply_text(prompt)
        user_data = getattr(context, "user_data", None)
        if isinstance(user_data, dict):
            user_data["awaiting_wifi_creds"] = True

    # –û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è WiFi –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö
    elif getattr(context, "user_data", {}).get("awaiting_wifi_creds") and text and ";" in text:
        try:
            ssid, password = [part.strip() for part in text.split(";", 1)]
        except Exception:
            ssid, password = "", ""

        if not ssid or not password:
            await message.reply_text(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–∫–ª–∞–¥: my_wifi;my_password" if user.language == "uk" else "‚ùå Invalid format. Example: my_wifi;my_password"
            )
        else:
            from hardware.wifi_manager import wifi_manager
            await message.reply_text("üîÑ –ü—ñ–¥–∫–ª—é—á–∞—é..." if user.language == "uk" else "üîÑ Connecting...")
            ok, info = wifi_manager.connect_to_wifi(ssid, password)
            if ok:
                await message.reply_text(
                    "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ WiFi" if user.language == "uk" else "‚úÖ Connected to WiFi"
                )
            else:
                await message.reply_text(
                    info if user.language == "uk" else (info.replace("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ", "Connected") if info else "‚ùå Failed to connect")
                )

        ud = getattr(context, "user_data", None)
        if isinstance(ud, dict):
            ud["awaiting_wifi_creds"] = False

    # Spotify
    elif text in ["üéµ Spotify", "üéµ –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ Spotify", "üéµ Connect Spotify"]:
        if spotify_manager.is_connected(user_id):
            if user.language == "uk":
                await message.reply_text(
                    "‚úÖ Spotify –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!\n\n"
                    "–©–æ–± –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ –ø—ñ—Å–Ω—é, –Ω–∞–¥—ñ—à–ª–∏:\n"
                    "`–ì—Ä–∞–π: –ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ`",
                    parse_mode='Markdown'
                )
            else:
                await message.reply_text(
                    "‚úÖ Spotify already connected!\n\n"
                    "To play a song, send:\n"
                    "`Play: Song name`",
                    parse_mode='Markdown'
                )
        else:
            auth_url = spotify_manager.get_auth_url(user_id)
            if user.language == "uk":
                text_msg = (
                    "üéµ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Spotify\n\n"
                    "üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:\n"
                    "1. –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∏–∂—á–µ\n"
                    "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ Spotify\n"
                    "3. –°–∫–æ–ø—ñ—é–π –∫–æ–¥ —è–∫–∏–π –æ—Ç—Ä–∏–º–∞—î—à\n"
                    "4. –ù–∞–¥—ñ—à–ª–∏ –π–æ–≥–æ —Å—é–¥–∏\n\n"
                    f"üîó [–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è]({auth_url})"
                )
            else:
                text_msg = (
                    "üéµ Connect Spotify\n\n"
                    "üìñ Instructions:\n"
                    "1. Click link below\n"
                    "2. Authorize in Spotify\n"
                    "3. Copy the code you receive\n"
                    "4. Send it here\n\n"
                    f"üîó [Authorize]({auth_url})"
                )

            await message.reply_text(
                text_msg,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            user_data = getattr(context, "user_data", None)
            if isinstance(user_data, dict):
                user_data['awaiting_spotify_code'] = True

    # Google Calendar
    elif text in ["üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä", "üìÖ –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ Google Calendar", "üìÖ Connect Google Calendar"]:
        if google_calendar_manager.is_connected(user_id):
            if user.language == "uk":
                await message.reply_text(
                    "‚úÖ Google Calendar –≤–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!\n\n"
                    "–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ–¥—ñ—é, –Ω–∞–¥—ñ—à–ª–∏:\n"
                    "`–ü–æ–¥—ñ—è: –ù–∞–∑–≤–∞ | YYYY-MM-DD HH:MM`\n\n"
                    "–ü—Ä–∏–∫–ª–∞–¥:\n"
                    "`–ü–æ–¥—ñ—è: –ó—É—Å—Ç—Ä—ñ—á | 2025-10-15 14:30`",
                    parse_mode='Markdown'
                )
            else:
                await message.reply_text(
                    "‚úÖ Google Calendar already connected!\n\n"
                    "To create event, send:\n"
                    "`Event: Name | YYYY-MM-DD HH:MM`\n\n"
                    "Example:\n"
                    "`Event: Meeting | 2025-10-15 14:30`",
                    parse_mode='Markdown'
                )
        else:
            auth_url = google_calendar_manager.get_auth_url(user_id)
            if user.language == "uk":
                text_msg = (
                    "üìÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è Google Calendar\n\n"
                    "üìñ –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è:\n"
                    "1. –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è\n"
                    "2. –ê–≤—Ç–æ—Ä–∏–∑—É–π—Å—è –≤ Google\n"
                    "3. –°–∫–æ–ø—ñ—é–π –∫–æ–¥\n"
                    "4. –ù–∞–¥—ñ—à–ª–∏ –π–æ–≥–æ —Å—é–¥–∏\n\n"
                    f"üîó [–ê–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—è]({auth_url})"
                )
            else:
                text_msg = (
                    "üìÖ Connect Google Calendar\n\n"
                    "üìñ Instructions:\n"
                    "1. Click link\n"
                    "2. Authorize in Google\n"
                    "3. Copy code\n"
                    "4. Send it here\n\n"
                    f"üîó [Authorize]({auth_url})"
                )

            await message.reply_text(
                text_msg,
                parse_mode='Markdown',
                disable_web_page_preview=True
            )
            user_data = getattr(context, "user_data", None)
            if isinstance(user_data, dict):
                user_data['awaiting_google_code'] = True

    # –û—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å - –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø
    elif text in ["üó£Ô∏è –û—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å", "üó£Ô∏è –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å", "üó£Ô∏è Setup Personality"]:
        current_prompt = user.personality_prompt or "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"

        if user.language == "uk":
            text_msg = (
                "üó£Ô∏è –û—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –±–æ—Ç–∞\n\n"
                f"–ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–º–ø—Ç:\n`{current_prompt}`\n\n"
                "–ù–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç –∞–±–æ –∫–æ–º–∞–Ω–¥–∏:\n"
                "‚Ä¢ `–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏` - –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–æ—Ç–æ—á–Ω–∏–π\n"
                "‚Ä¢ `—Å–∫–∏–Ω—É—Ç–∏` - –≤–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–º–ø—Ç\n"
                "‚Ä¢ –∞–±–æ –Ω–∞–¥—ñ—à–ª–∏ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç"
            )
        else:
            text_msg = (
                "üó£Ô∏è Bot Personality\n\n"
                f"Current prompt:\n`{current_prompt}`\n\n"
                "Send new prompt or commands:\n"
                "‚Ä¢ `view` - show current\n"
                "‚Ä¢ `reset` - delete prompt\n"
                "‚Ä¢ or send new text"
            )

        await message.reply_text(text_msg, parse_mode='Markdown')
        user_data = getattr(context, "user_data", None)
        if isinstance(user_data, dict):
            user_data['awaiting_personality'] = True
    
    # –®–≤–∏–¥–∫–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –±–µ–∑ –≤—Ö–æ–¥—É –≤ —Å—Ç–∞–Ω: "–ü—Ä–æ–º–ø—Ç: ..." / "Prompt: ..."
    elif isinstance(text, str) and (text.lower().startswith("–ø—Ä–æ–º–ø—Ç:") or text.lower().startswith("prompt:")):
        new_prompt = text.split(":", 1)[1].strip() if (":" in text) else ""
        if not new_prompt:
            await message.reply_text(
                "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–ª—è '–ü—Ä–æ–º–ø—Ç:'" if user.language == "uk" else "‚ùå No text after 'Prompt:'"
            )
            db.close()
            return
        user.personality_prompt = new_prompt
        db.commit()
        await message.reply_text(
            ("‚úÖ –û—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ!" if user.language == "uk" else "‚úÖ Personality updated!"),
            reply_markup=setup_menu_keyboard(user.language)
        )
        db.close()
        return

    # –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
    elif text in ["üîô –ù–∞–∑–∞–¥ –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", "üîô Back to Settings", "üîô Zur√ºck zu Einstellungen"]:
        await message.reply_text(
            "‚öôÔ∏è –ú–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å:" if user.language == "uk" else "‚öôÔ∏è Settings menu:",
            reply_markup=setup_menu_keyboard(user.language),
        )

    # –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ‚Üí –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
    elif text in ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "‚úÖ Finish Setup", "‚úÖ Einrichtung abschlie√üen"]:
        await message.reply_text(
            ("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é" if user.language == "uk" else "Main menu"),
            reply_markup=main_menu_keyboard(),
        )

    db.close()


async def voice_control_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–≤—ñ–º–∫–Ω—É—Ç–∏/–≤–∏–º–∫–Ω—É—Ç–∏ –≥–æ–ª–æ—Å"""
    tg_user = update.effective_user
    message = update.message
    if tg_user is None or message is None:
        return

    text = message.text
    user_id = tg_user.id

    if text in ["üé§ –£–≤—ñ–º–∫–Ω—É—Ç–∏ –≥–æ–ª–æ—Å", "üé§ Enable Voice"]:
        started = voice_daemon_manager.start_for_user(user_id)
        if started:
            await message.reply_text("‚úÖ –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º —É–≤—ñ–º–∫–Ω–µ–Ω–æ –Ω–∞ –ø—Ä–∏—Å—Ç—Ä–æ—ó")
        else:
            await message.reply_text("‚ÑπÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º –≤–∂–µ –ø—Ä–∞—Ü—é—î")
        
    elif text in ["üîá –í–∏–º–∫–Ω—É—Ç–∏ –≥–æ–ª–æ—Å", "üîá Disable Voice"]:
        stopped = voice_daemon_manager.stop_for_user(user_id)
        if stopped:
            await message.reply_text("üîá –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º –≤–∏–º–∫–Ω–µ–Ω–æ")
        else:
            await message.reply_text("‚ÑπÔ∏è –ì–æ–ª–æ—Å–æ–≤–∏–π —Ä–µ–∂–∏–º –≤–∂–µ –≤–∏–º–∫–Ω–µ–Ω–∏–π")

async def openai_key_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω—è OpenAI API –∫–ª—é—á–∞"""
    user_data = getattr(context, "user_data", None)
    if not (isinstance(user_data, dict) and user_data.get("awaiting_openai_key")):
        return

    tg_user = update.effective_user
    message = update.message

    if tg_user is None or message is None:
        return

    user_id = tg_user.id
    api_key = (message.text or "").strip()

    db = SessionLocal()
    user = db.query(User).filter(User.telegram_user_id == user_id).first()
    db.close()

    if not user:
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
    if not api_key.startswith("sk-"):
        if user.language == "uk":
            await message.reply_text(
                "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞.\n" "–ö–ª—é—á –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—è –∑ `sk-`",
                parse_mode="Markdown",
            )
        else:
            await message.reply_text(
                "‚ùå Invalid key format.\n" "Key must start with `sk-`",
                parse_mode="Markdown",
            )
        return

    # –¢–µ—Å—Ç—É—î–º–æ –∫–ª—é—á
    if user.language == "uk":
        await message.reply_text("üîÑ –ü–µ—Ä–µ–≤—ñ—Ä—è—é –∫–ª—é—á...")
    else:
        await message.reply_text("üîÑ Validating key...")

    is_valid, validation_message = api_manager.validate_openai_key(api_key)

    if is_valid:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—é—á
        api_manager.set_openai_key(user_id, api_key)

        if user.language == "uk":
            await message.reply_text(
                "‚úÖ OpenAI API –∫–ª—é—á –∑–±–µ—Ä–µ–∂–µ–Ω–æ!\n\n"
                "–¢–µ–ø–µ—Ä VoiceBot –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ —Ç–≤—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –∫–ª—é—á.",
                reply_markup=setup_menu_keyboard(user.language),
            )
        else:
            await message.reply_text(
                "‚úÖ OpenAI API key saved!\n\n" "VoiceBot will now use your personal key.",
                reply_markup=setup_menu_keyboard(user.language),
            )
    else:
        await message.reply_text(validation_message, reply_markup=api_keys_keyboard(user.language))

    if isinstance(user_data, dict):
        user_data["awaiting_openai_key"] = False


async def spotify_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ Spotify authorization code"""
    user_data = getattr(context, "user_data", None)
    if not (isinstance(user_data, dict) and user_data.get('awaiting_spotify_code')):
        return

    tg_user = update.effective_user
    message = update.message
    if tg_user is None or message is None:
        return

    user_id = tg_user.id
    code = (message.text or "").strip()

    await message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –∫–æ–¥...")
    await message.reply_text(
        "‚ö†Ô∏è Spotify OAuth –ø–æ—Ç—Ä–µ–±—É—î –≤–µ–±-—Å–µ—Ä–≤–µ—Ä.\n"
        "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ.\n\n"
        "–ü–æ–∫–∏ —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –≥–æ–ª–æ—Å–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ –±–µ–∑ Spotify."
    )

    user_data['awaiting_spotify_code'] = False


async def google_code_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–∫–∞ Google authorization code"""
    user_data = getattr(context, "user_data", None)
    if not (isinstance(user_data, dict) and user_data.get('awaiting_google_code')):
        return

    tg_user = update.effective_user
    message = update.message
    if tg_user is None or message is None:
        return

    user_id = tg_user.id
    code = (message.text or "").strip()

    await message.reply_text("üîÑ –û–±—Ä–æ–±–ª—è—é –∫–æ–¥...")
    await message.reply_text(
        "‚ö†Ô∏è Google OAuth –ø–æ—Ç—Ä–µ–±—É—î –≤–µ–±-—Å–µ—Ä–≤–µ—Ä.\n"
        "–¶—è —Ñ—É–Ω–∫—Ü—ñ—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
    )

    user_data['awaiting_google_code'] = False


async def personality_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    user_data = getattr(context, "user_data", None)
    if not (isinstance(user_data, dict) and user_data.get('awaiting_personality')):
        return

    tg_user = update.effective_user
    message = update.message
    if tg_user is None or message is None:
        return

    user_id = tg_user.id
    text = (message.text or "").strip()

    print(f"–û–±—Ä–æ–±–ª—è—é personality prompt –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")
    print(f"–¢–µ–∫—Å—Ç –ø—Ä–æ–º—Ç—É: '{text[:30]}...'")

    db = SessionLocal()
    user = None
    try:
        user = db.query(User).filter(User.telegram_user_id == user_id).first()

        if not user:
            await message.reply_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö")
            return

        # –ö–æ–º–∞–Ω–¥–∏
        if text.lower() in ['–ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏', 'view']:
            current = user.personality_prompt or "–ù–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            print(f"–ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–º—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {current[:30]}...")
            await message.reply_text(
                f"üó£Ô∏è –ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–º–ø—Ç:\n\n`{current}`",
                parse_mode='Markdown'
            )
            return

        elif text.lower() in ['—Å–∫–∏–Ω—É—Ç–∏', 'reset']:
            try:
                user.personality_prompt = None
                db.commit()
                print("–ü—Ä–æ–º—Ç —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ")
                await message.reply_text(
                    "‚úÖ –ü—Ä–æ–º–ø—Ç –≤–∏–¥–∞–ª–µ–Ω–æ. –ë–æ—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏–º–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É.",
                    reply_markup=setup_menu_keyboard(user.language)
                )
                user_data['awaiting_personality'] = False
                return
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –ø—Ä–æ–º—Ç—É: {e}")
                db.rollback()
                await message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –ø—Ä–æ–º–ø—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.",
                    reply_markup=setup_menu_keyboard(user.language)
                )
                user_data['awaiting_personality'] = False
                return

        # –ù–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç
        try:
            # –ó–±–µ—Ä–µ–∂–µ–º–æ –ø—Ä–æ–º—Ç —É 2 –µ—Ç–∞–ø–∏ –∑ —è–≤–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
            # 1. –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –æ–±'—î–∫—Ç—ñ –º–æ–¥–µ–ª—ñ
            user.personality_prompt = text
            
            # 2. –Ø–≤–Ω–∏–π commit –≤ –ë–î
            db.commit()
            
            # 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –ø—Ä–æ–º—Ç —Å–ø—Ä–∞–≤–¥—ñ –∑–±–µ—Ä—ñ–≥—Å—è
            db.refresh(user)
            saved_prompt = user.personality_prompt
            
            if saved_prompt == text:
                print("‚úÖ –ü—Ä–æ–º—Ç —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ")
                success = True
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–º—Ç –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –∞–±–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                success = False
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –ø—Ä–æ–º—Ç—É: {e}")
            db.rollback()
            success = False

        if success:
            if user.language == "uk":
                await message.reply_text(
                    f"‚úÖ –û—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å –æ–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                    f"–ù–æ–≤–∏–π –ø—Ä–æ–º–ø—Ç:\n`{text[:100]}{'...' if len(text) > 100 else ''}`",
                    parse_mode='Markdown',
                    reply_markup=setup_menu_keyboard(user.language)
                )
            else:
                await message.reply_text(
                    f"‚úÖ Personality updated!\n\n"
                    f"New prompt:\n`{text[:100]}{'...' if len(text) > 100 else ''}`",
                    parse_mode='Markdown',
                    reply_markup=setup_menu_keyboard(user.language)
                )
        else:
            if user.language == "uk":
                await message.reply_text(
                    "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–º–ø—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ —Å–∫–æ—Ä–æ—Ç–∏—Ç–∏ —Ç–µ–∫—Å—Ç –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –ª–∏—à–µ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ —Å–∏–º–≤–æ–ª–∏.",
                    reply_markup=setup_menu_keyboard(user.language)
                )
            else:
                await message.reply_text(
                    "‚ùå Failed to save the prompt. Please try shortening the text or using only Latin characters.",
                    reply_markup=setup_menu_keyboard(user.language)
                )

        user_data['awaiting_personality'] = False
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ personality_handler: {e}")
        await message.reply_text(
            "‚ùå –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.",
            reply_markup=setup_menu_keyboard(user.language if user else "uk")
        )
        user_data['awaiting_personality'] = False
    finally:
        db.close()