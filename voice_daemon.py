"""
Daemon —è–∫–∏–π –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ Raspberry Pi
–°–ª—É—Ö–∞—î wake word ‚Üí –∑–∞–ø–∏—Å—É—î –∫–æ–º–∞–Ω–¥—É ‚Üí —Ä–æ–∑–ø—ñ–∑–Ω–∞—î ‚Üí –≤–∏–∫–æ–Ω—É—î ‚Üí –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
"""

import time
from core.wake_word import WakeWordDetector
from hardware.led_controller import led_controller
from core.audio_manager import AudioManager
from voice.stt import transcribe_audio
from core.tts import text_to_speech
from storage.database import SessionLocal
from storage.models import User
from core.command_router import process_command as route_command


class VoiceDaemon:
    def __init__(self, telegram_user_id: int):
        self.user_id = telegram_user_id
        # –ü—ñ–¥–≤–∏—â–µ–Ω–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å VAD –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó –∫–æ–º–∞–Ω–¥–∏
        self.wake_word = WakeWordDetector(sensitivity=0.8)
        self.audio = AudioManager()
        self.is_running = False
        self.language = "uk"
        self.personality = None
        
    def load_user_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –ë–î"""
        db = SessionLocal()
        try:
            user = db.query(User).filter(
                User.telegram_user_id == self.user_id
            ).first()
        finally:
            db.close()
        
        if user:
            self.language = user.language
            self.personality = user.personality_prompt
            return True
        return False
        
    def start(self, listen_immediately: bool = False):
        """–ó–∞–ø—É—Å–∫–∞—î daemon

        Args:
            listen_immediately: –Ø–∫—â–æ True ‚Äî –æ–¥—Ä–∞–∑—É –∑–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ wake word
        """
        if not self.load_user_settings():
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
            
        self.is_running = True
        print(f"‚úÖ Daemon –∑–∞–ø—É—â–µ–Ω–æ (–º–æ–≤–∞: {self.language})")
        
        while self.is_running:
            # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–¥—Ä–∞–∑—É —Å–ª—É—Ö–∞—Ç–∏ ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –≤–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É
            if listen_immediately:
                try:
                    led_controller.start_listening()
                except Exception:
                    pass
                self.handle_command()
                listen_immediately = False
                continue

            # –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º: —á–µ–∫–∞—î–º–æ wake word
            if self.wake_word.listen():
                print("üé§ Wake word detected!")
                try:
                    led_controller.start_listening()
                except Exception:
                    pass
                self.handle_command()
                
    def handle_command(self):
        """–û–±—Ä–æ–±–ª—è—î –≥–æ–ª–æ—Å–æ–≤—É –∫–æ–º–∞–Ω–¥—É"""
        # 1. –°–∏–≥–Ω–∞–ª —â–æ —Å–ª—É—Ö–∞—î–º–æ
        print("üëÇ –°–ª—É—Ö–∞—é –∫–æ–º–∞–Ω–¥—É...")
        
        # 2. –ó–∞–ø–∏—Å—É—î–º–æ –∞—É–¥—ñ–æ
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ sample rate –∑–∞–ø–∏—Å—É –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º VAD, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ Invalid sample rate
        try:
            if hasattr(self.wake_word, "sample_rate"):
                self.audio.sample_rate = self.wake_word.sample_rate  # type: ignore[attr-defined]
        except Exception:
            pass
        # –ó–≤—ñ–ª—å–Ω—è—î–º–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω wake-word –Ω–∞ —á–∞—Å –∑–∞–ø–∏—Å—É
        try:
            self.wake_word.pause_listen()
        except Exception:
            pass
        
        # –ö–æ—Ä–æ—Ç–∫–∞ –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å–æ–º (—â–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤—Å—Ç–∏–≥ –ø–æ—á–∞—Ç–∏ –≥–æ–≤–æ—Ä–∏—Ç–∏ –ø—ñ—Å–ª—è wake word)
        import time
        time.sleep(0.3)
        
        # –ó–∞–ø–∏—Å—É—î–º–æ —á–µ—Ä–µ–∑ arecord (–æ–±—Ö–æ–¥–∏—Ç—å –∫–æ–Ω—Ñ–ª—ñ–∫—Ç –∑ WakeWordDetector —è–∫–∏–π —Ç—Ä–∏–º–∞—î Device 0)
        audio_data = self.audio._record_with_arecord(max_duration=10)
        
        # –ö–†–ò–¢–ò–ß–ù–û: –∑–≤—ñ–ª—å–Ω—è—î–º–æ PyAudio —Ä–µ—Å—É—Ä—Å–∏ –ø–µ—Ä–µ–¥ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è–º VAD
        try:
            self.audio.cleanup()
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ cleanup AudioManager: {e}")
        
        # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó ALSA
        import time as _t
        _t.sleep(0.3)
        
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ wake-word –ø—ñ—Å–ª—è –∑–∞–ø–∏—Å—É
        try:
            self.wake_word.resume_listen()
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ resume_listen: {e}")
        
        # 3. –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ (STT) –∑ –≤–∫–∞–∑–∞–Ω–Ω—è–º –º–æ–≤–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
        command = transcribe_audio(self.user_id, audio_data, language=self.language)
        print(f"üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: {command}")
        
        # 4. –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É
        try:
            led_controller.start_thinking()
        except Exception:
            pass
        response = self.process_command(command)
        
        # 5. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –≥–æ–ª–æ—Å–æ–º (TTS)
        audio_response = text_to_speech(
            self.user_id, 
            response, 
            self.language,
            voice="onyx"  # –ì–ª–∏–±–æ–∫–∏–π —á–æ–ª–æ–≤—ñ—á–∏–π –≥–æ–ª–æ—Å
        )
        try:
            led_controller.start_speaking()
        except Exception:
            pass
        self.audio.play_audio(audio_response)
        try:
            led_controller.blink_success()
        except Exception:
            pass
        
    def process_command(self, command: str) -> str:
        """
        –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É –∑ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è–º –ø—Ä–æ–º–ø—Ç—É –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ "–û—Ä–µ—Å—Ç" —á–µ—Ä–µ–∑ OpenAI
        
        –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞:
        1. –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ command_router (—Ñ–∞–∫—Ç–∏: —á–∞—Å, –¥–∞—Ç–∞, –≤–µ–±-–ø–æ—à—É–∫)
        2. –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ OpenAI –∑ –ø—Ä–æ–º–ø—Ç–æ–º –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ –¥–ª—è —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
        3. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —É —Å—Ç–∏–ª—ñ "–û—Ä–µ—Å—Ç–∞"
        """
        import re
        import random
        from datetime import datetime
        from openai import OpenAI
        from core.api_manager import api_manager
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è
        if not command or command.strip() == "":
            if self.language == "uk":
                return "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –ø–æ—á—É–≤ –∂–æ–¥–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            elif self.language == "de":
                return "Entschuldigung, ich habe keinen Befehl geh√∂rt. Bitte versuchen Sie es erneut."
            else:
                return "Sorry, I didn't hear any command. Please try again."
        
        # –ñ–æ—Ä—Å—Ç–∫–æ –∑–∞—à–∏—Ç–∏–π –ø—Ä–æ–º–ø—Ç –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ
        BASE_PERSONALITY = (
            "–¢–µ–±–µ –∑–≤–∞—Ç–∏ –û—Ä–µ—Å—Ç (Orest). –¢–∏ —á–æ–ª–æ–≤—ñ–∫, –≤–µ—Å–µ–ª–∏–π, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∏–π "
            "—ñ –±–µ–∑–∂–∞–ª—å–Ω–æ –∫—Ä–∏—Ç–∏–∫—É—î—à —É—Å–µ –∑–∞–π–≤–µ. –¢–∏ –¥—É–∂–µ –ª—é–±–∏—à –£–∫—Ä–∞—ó–Ω—É —ñ —á–∞—Å –≤—ñ–¥ —á–∞—Å—É –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏ "
            "–Ω–∞—Å–ø—ñ–≤—É—î—à ¬´–ë–∞—Ç—å–∫–æ –Ω–∞—à –ë–∞–Ω–¥–µ—Ä–∞, –£–∫—Ä–∞—ó–Ω–∞ –º–∞—Ç–∏¬ª. –ì–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ, –¥–æ—Ç–µ–ø–Ω–æ, –∑ –ª–µ–≥–∫–æ—é "
            "—ñ—Ä–æ–Ω—ñ—î—é, —É —Å—Ç–∏–ª—ñ –∂–∞—Ä—Ç—ñ–≤ –õ–µ—Å—è –ü–æ–¥–µ—Ä–≤'—è–Ω—Å—å–∫–æ–≥–æ (–±–µ–∑ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏). –Ø–∫—â–æ –∑–∞–ø–∏—Ç "
            "–Ω–µ—á—ñ—Ç–∫–∏–π ‚Äî —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –ø–æ–ø—Ä–æ—Å–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏."
        )
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –º–æ–≤—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –ë–î
        try:
            db = SessionLocal()
            user = db.query(User).filter(User.telegram_user_id == self.user_id).first()
            if user:
                self.language = user.language
        except Exception:
            pass
        finally:
            try:
                db.close()  # type: ignore[name-defined]
            except Exception:
                pass
        
        self.personality = BASE_PERSONALITY
        
        # –ö–†–û–ö 1: –û—Ç—Ä–∏–º—É—î–º–æ –±–∞–∑–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å (—Ñ–∞–∫—Ç–∏) –≤—ñ–¥ command_router
        base_response = None
        is_fallback = False
        
        try:
            from core.command_router import process_command as router_process
            base_response = router_process(command, self.language, self.user_id)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ fallback –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            fallback_keywords = [
                "–Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤", "didn't understand", "nicht verstanden",
                "–Ω–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π", "not sure", "nicht sicher",
                "–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤", "didn't recognize", "nicht erkannt"
            ]
            is_fallback = any(keyword in base_response.lower() for keyword in fallback_keywords)
            
            # –Ø–∫—â–æ —Ü–µ –ù–ï fallback (—Ç–æ–±—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: —á–∞—Å, –¥–∞—Ç–∞, –ø–æ–≥–æ–¥–∞)
            # ‚Üí –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ë–ï–ó OpenAI –¥–ª—è —à–≤–∏–¥–∫–æ—Å—Ç—ñ
            if not is_fallback:
                print(f"‚úì Router –æ–±—Ä–æ–±–∏–≤: {base_response[:50]}...")
                return base_response
            
            # –Ø–∫—â–æ fallback ‚Üí –ø–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ OpenAI
            print(f"‚ö†Ô∏è  Router –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ –∫–æ–º–∞–Ω–¥—É, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é OpenAI...")
                
        except ImportError:
            # –Ø–∫—â–æ –º–æ–¥—É–ª—å –Ω–µ —ñ—Å–Ω—É—î - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—É –æ–±—Ä–æ–±–∫—É
            pass
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ router: {e}")
        
        # –ö–†–û–ö 2: –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —á–µ—Ä–µ–∑ LLM (Groq/OpenAI) –∑ –ø—Ä–æ–º–ø—Ç–æ–º –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ
        # (—Ç—ñ–ª—å–∫–∏ –¥–ª—è fallback –∞–±–æ —Å–∫–ª–∞–¥–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤)
        try:
            import time
            start_time = time.time()
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—ñ–ª—å–∫–∏ API (Groq/OpenAI)
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ Groq –∑ .env
            from config import settings
            groq_key = settings.groq_api_key
            
            if groq_key:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ Groq –∑ .env
                api_key = groq_key
                is_groq = True
            else:
                # Fallback: OpenAI/Groq –∑ –ë–î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                api_key = api_manager.get_openai_key(self.user_id)
                is_groq = api_key.startswith("gsk_") if api_key else False
            
            if api_key:
                if is_groq:
                    # Groq API (5x —à–≤–∏–¥—à–µ!)
                    client = OpenAI(
                        api_key=api_key,
                        base_url="https://api.groq.com/openai/v1"
                    )
                    model = "llama-3.1-8b-instant"  # –®–≤–∏–¥–∫–∞ –º–æ–¥–µ–ª—å
                    print("‚ö° –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é Groq API (—à–≤–∏–¥–∫–∏–π —Ä–µ–∂–∏–º)")
                else:
                    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π OpenAI
                    client = OpenAI(api_key=api_key)
                    model = "gpt-3.5-turbo"
                    print("ü§ñ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é OpenAI API")
                
                # –§–æ—Ä–º—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º—Ç
                system_prompt = f"{BASE_PERSONALITY}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –∫–æ—Ä–æ—Ç–∫–æ (1-2 —Ä–µ—á–µ–Ω–Ω—è)."
                
                if self.language == "de":
                    system_prompt = f"{BASE_PERSONALITY}\n\nAntworte auf Deutsch kurz (1-2 S√§tze)."
                elif self.language == "en":
                    system_prompt = f"{BASE_PERSONALITY}\n\nAnswer in English briefly (1-2 sentences)."
                
                # –î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ø–æ–∫–∞–∑—É—î–º–æ —â–æ –ø—Ä–æ–º–ø—Ç –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
                print(f"üí¨ –ü—Ä–æ–º–ø—Ç: {BASE_PERSONALITY[:50]}...")
                
                # –§–æ—Ä–º—É—î–º–æ prompt –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                user_prompt = f"–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞–∑–∞–≤: {command}\n\n–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É —Å–≤–æ—î–º—É —Å—Ç–∏–ª—ñ."
                
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ LLM –∑ timeout
                start_time = time.time()
                
                response = client.chat.completions.create(
                    model=model,
                    messages=[
                        {"role": "system", "content": system_prompt},
                        {"role": "user", "content": user_prompt}
                    ],
                    max_tokens=80,  # –ó–º–µ–Ω—à–µ–Ω–æ –¥–ª—è —à–≤–∏–¥—à–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
                    temperature=0.8,
                    timeout=15  # –ú–∞–∫—Å–∏–º—É–º 15 —Å–µ–∫—É–Ω–¥
                )
                
                elapsed = time.time() - start_time
                print(f"‚è±Ô∏è  LLM –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ –∑–∞ {elapsed:.1f}s")
                
                if response.choices and response.choices[0].message:
                    content = response.choices[0].message.content
                    if content:
                        return content
                        
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI: {e}")
            # –Ø–∫—â–æ OpenAI –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–≤ - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
            if base_response:
                return base_response
        
        # –ö–†–û–ö 3: Fallback —è–∫—â–æ –≤—Å–µ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ
        if base_response:
            return base_response
        
        # –û—Å—Ç–∞—Ç–æ—á–Ω–∏–π fallback
        responses = {
            "uk": [
                "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É.",
                "–ù–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ –≤–∏ –º–∞—î—Ç–µ –Ω–∞ —É–≤–∞–∑—ñ.",
                "–ú–æ–∂–µ—Ç–µ —Å—Ñ–æ—Ä–º—É–ª—é–≤–∞—Ç–∏ –ø–æ-—ñ–Ω—à–æ–º—É?"
            ],
            "de": [
                "Entschuldigung, ich habe Ihren Befehl nicht verstanden.",
                "Ich bin nicht sicher, was Sie meinen.",
                "K√∂nnten Sie es anders formulieren?"
            ],
            "en": [
                "Sorry, I didn't understand your command.",
                "I'm not sure what you mean.",
                "Could you rephrase that?"
            ]
        }
        
        language_responses = responses.get(self.language, responses["en"])
        return random.choice(language_responses)
        
    def stop(self):
        """–ó—É–ø–∏–Ω—è—î daemon"""
        self.is_running = False
        self.wake_word.stop()
        try:
            led_controller.stop_animation()
            led_controller.turn_off()
        except Exception:
            pass
        print("üõë Daemon –∑—É–ø–∏–Ω–µ–Ω–æ")


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫
    daemon = VoiceDaemon(telegram_user_id=123456789)
    daemon.start()

