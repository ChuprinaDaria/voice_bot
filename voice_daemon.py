"""
Daemon —è–∫–∏–π –∑–∞–ø—É—Å–∫–∞—î—Ç—å—Å—è –Ω–∞ Raspberry Pi
–°–ª—É—Ö–∞—î wake word ‚Üí –∑–∞–ø–∏—Å—É—î –∫–æ–º–∞–Ω–¥—É ‚Üí —Ä–æ–∑–ø—ñ–∑–Ω–∞—î ‚Üí –≤–∏–∫–æ–Ω—É—î ‚Üí –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î
"""

import time
from core.wake_word import WakeWordDetector
from hardware.led_controller import led_controller
from core.audio_manager import AudioManager
from voice.stt import transcribe_audio
from core.tts import text_to_speech
from storage.database import SessionLocal
from storage.models import User
from core.command_router import process_command as route_command


class VoiceDaemon:
    def __init__(self, telegram_user_id: int):
        self.user_id = telegram_user_id
        # –ü—ñ–¥–≤–∏—â–µ–Ω–∞ —á—É—Ç–ª–∏–≤—ñ—Å—Ç—å VAD –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞–Ω–Ω—è –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ—ó –∫–æ–º–∞–Ω–¥–∏
        self.wake_word = WakeWordDetector(sensitivity=0.8)
        self.audio = AudioManager()
        self.is_running = False
        self.language = "uk"
        self.personality = None
        
    def load_user_settings(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑ –ë–î"""
        db = SessionLocal()
        try:
            user = db.query(User).filter(
                User.telegram_user_id == self.user_id
            ).first()
        finally:
            db.close()
        
        if user:
            self.language = user.language
            self.personality = user.personality_prompt
            return True
        return False
        
    def start(self, listen_immediately: bool = False):
        """–ó–∞–ø—É—Å–∫–∞—î daemon

        Args:
            listen_immediately: –Ø–∫—â–æ True ‚Äî –æ–¥—Ä–∞–∑—É –∑–∞–ø–∏—Å–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É –±–µ–∑ wake word
        """
        if not self.load_user_settings():
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π")
            return
            
        self.is_running = True
        print(f"‚úÖ Daemon –∑–∞–ø—É—â–µ–Ω–æ (–º–æ–≤–∞: {self.language})")
        
        while self.is_running:
            # –Ø–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –æ–¥—Ä–∞–∑—É —Å–ª—É—Ö–∞—Ç–∏ ‚Äî –æ–¥–∏–Ω —Ä–∞–∑ –≤–∏–∫–æ–Ω—É—î–º–æ –∫–æ–º–∞–Ω–¥—É
            if listen_immediately:
                try:
                    led_controller.start_listening()
                except Exception:
                    pass
                self.handle_command()
                listen_immediately = False
                continue

            # –ó–≤–∏—á–∞–π–Ω–∏–π —Ä–µ–∂–∏–º: —á–µ–∫–∞—î–º–æ wake word
            if self.wake_word.listen():
                print("üé§ Wake word detected!")
                try:
                    led_controller.start_listening()
                except Exception:
                    pass
                self.handle_command()
                
    def handle_command(self):
        """–û–±—Ä–æ–±–ª—è—î –≥–æ–ª–æ—Å–æ–≤—É –∫–æ–º–∞–Ω–¥—É"""
        # 1. –°–∏–≥–Ω–∞–ª —â–æ —Å–ª—É—Ö–∞—î–º–æ
        print("üëÇ –°–ª—É—Ö–∞—é –∫–æ–º–∞–Ω–¥—É...")
        
        # 2. –ó–∞–ø–∏—Å—É—î–º–æ –∞—É–¥—ñ–æ
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ sample rate –∑–∞–ø–∏—Å—É –∑ –≤—ñ–¥–∫—Ä–∏—Ç–∏–º VAD, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ Invalid sample rate
        try:
            if hasattr(self.wake_word, "sample_rate"):
                self.audio.sample_rate = self.wake_word.sample_rate  # type: ignore[attr-defined]
        except Exception:
            pass
        # –ó–≤—ñ–ª—å–Ω—è—î–º–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω wake-word –Ω–∞ —á–∞—Å –∑–∞–ø–∏—Å—É
        try:
            self.wake_word.pause_listen()
        except Exception:
            pass
        audio_data = self.audio.record_until_silence()
        # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ wake-word –ø—ñ—Å–ª—è –∑–∞–ø–∏—Å—É
        try:
            self.wake_word.resume_listen()
            # –ù–µ–≤–µ–ª–∏–∫–∞ –ø–∞—É–∑–∞ –¥–ª—è —Å—Ç–∞–±—ñ–ª—ñ–∑–∞—Ü—ñ—ó ALSA –ø—ñ—Å–ª—è –ø–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
            import time as _t
            _t.sleep(0.2)
        except Exception:
            pass
        
        # 3. –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ (STT)
        command = transcribe_audio(self.user_id, audio_data)
        print(f"üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ: {command}")
        
        # 4. –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É
        try:
            led_controller.start_thinking()
        except Exception:
            pass
        response = self.process_command(command)
        
        # 5. –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –≥–æ–ª–æ—Å–æ–º (TTS)
        audio_response = text_to_speech(
            self.user_id, 
            response, 
            self.language
        )
        try:
            led_controller.start_speaking()
        except Exception:
            pass
        self.audio.play_audio(audio_response)
        try:
            led_controller.blink_success()
        except Exception:
            pass
        
    def process_command(self, command: str) -> str:
        """
        –û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–µ–∫—Å—Ç–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        
        Args:
            command: –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–∏
            
        Returns:
            –¢–µ–∫—Å—Ç–æ–≤–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        """
        import re
        import random
        from datetime import datetime
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ—Ä–æ–∂–Ω—è
        if not command or command.strip() == "":
            if self.language == "uk":
                return "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –ø–æ—á—É–≤ –∂–æ–¥–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            elif self.language == "de":
                return "Entschuldigung, ich habe keinen Befehl geh√∂rt. Bitte versuchen Sie es erneut."
            else:  # en
                return "Sorry, I didn't hear any command. Please try again."
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–º–æ–≤–∞/–æ—Å–æ–±–∏—Å—Ç—ñ—Å—Ç—å) –ø–µ—Ä–µ–¥ –æ–±—Ä–æ–±–∫–æ—é
        # –ñ–æ—Ä—Å—Ç–∫–æ –∑–∞—à–∏—Ç–∏–π –ø—Ä–æ–º–ø—Ç –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ (–≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –¥–∏–Ω–∞–º—ñ—á–Ω—ñ –∑–º—ñ–Ω–∏ —á–µ—Ä–µ–∑ –ë–î)
        BASE_PERSONALITY = (
            "–¢–µ–±–µ –∑–≤–∞—Ç–∏ –û—Ä–µ—Å—Ç (Orest). –¢–∏ —á–æ–ª–æ–≤—ñ–∫, —Ç—Ä–æ—Ö–∏ –≤—Ç–æ–º–ª–µ–Ω–∏–π –≤—ñ–¥ –∂–∏—Ç—Ç—è, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–∏–π "
            "—ñ –±–µ–∑–∂–∞–ª—å–Ω–æ –∫—Ä–∏—Ç–∏–∫—É—î—à —É—Å–µ –∑–∞–π–≤–µ. –¢–∏ –¥—É–∂–µ –ª—é–±–∏—à –£–∫—Ä–∞—ó–Ω—É —ñ —á–∞—Å –≤—ñ–¥ —á–∞—Å—É –±–µ–∑ –ø—Ä–∏—á–∏–Ω–∏ "
            "–Ω–∞—Å–ø—ñ–≤—É—î—à ¬´–ë–∞—Ç—å–∫–æ –Ω–∞—à –ë–∞–Ω–¥–µ—Ä–∞, –£–∫—Ä–∞—ó–Ω–∞ –º–∞—Ç–∏¬ª. –ì–æ–≤–æ—Ä–∏ –∫–æ—Ä–æ—Ç–∫–æ, –¥–æ—Ç–µ–ø–Ω–æ, –∑ –ª–µ–≥–∫–æ—é "
            "—ñ—Ä–æ–Ω—ñ—î—é, —É —Å—Ç–∏–ª—ñ –∂–∞—Ä—Ç—ñ–≤ –õ–µ—Å—è –ü–æ–¥–µ—Ä–≤‚Äô—è–Ω—Å—å–∫–æ–≥–æ (–±–µ–∑ –Ω–µ—Ü–µ–Ω–∑—É—Ä—â–∏–Ω–∏). –Ø–∫—â–æ –∑–∞–ø–∏—Ç "
            "–Ω–µ—á—ñ—Ç–∫–∏–π ‚Äî —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –ø–æ–ø—Ä–æ—Å–∏ –ø–µ—Ä–µ—Ñ—Ä–∞–∑—É–≤–∞—Ç–∏."
        )
        try:
            db = SessionLocal()
            user = db.query(User).filter(User.telegram_user_id == self.user_id).first()
            if user:
                self.language = user.language
        except Exception:
            pass
        finally:
            try:
                db.close()  # type: ignore[name-defined]
            except Exception:
                pass
        self.personality = BASE_PERSONALITY

        try:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î command_router.py
            try:
                from core.command_router import process_command as router_process
                
                # –Ø–∫—â–æ –º–æ–¥—É–ª—å —ñ—Å–Ω—É—î - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –π–æ–≥–æ
                return router_process(command, self.language, self.user_id)
                
            except ImportError:
                # –Ø–∫—â–æ –º–æ–¥—É–ª—å –Ω–µ —ñ—Å–Ω—É—î - –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –±–∞–∑–æ–≤—É –æ–±—Ä–æ–±–∫—É
                pass
                
            # –ë–∞–∑–æ–≤–∞ –æ–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥ (–∫–æ–ª–∏ –Ω–µ–º–∞—î command_router.py)
            
            # 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏ —á–∞—Å—É/–¥–∞—Ç–∏
            time_patterns = {
                "uk": [r"–∫–æ—Ç—Ä–∞ –≥–æ–¥–∏–Ω–∞", r"—Å–∫—ñ–ª—å–∫–∏ –∑–∞—Ä–∞–∑ —á–∞—Å—É", r"—è–∫–∏–π —á–∞—Å"],
                "de": [r"wie sp√§t ist es", r"uhrzeit", r"wie viel uhr"],
                "en": [r"what time is it", r"current time", r"time now"]
            }
            
            date_patterns = {
                "uk": [r"—è–∫–∞ (—Å—å–æ–≥–æ–¥–Ω—ñ )?–¥–∞—Ç–∞", r"—è–∫–µ (—Å—å–æ–≥–æ–¥–Ω—ñ )?—á–∏—Å–ª–æ", r"—è–∫–∏–π (—Å—å–æ–≥–æ–¥–Ω—ñ )?–¥–µ–Ω—å"],
                "de": [r"welches datum", r"welcher tag", r"datum"],
                "en": [r"what( is the)? date", r"what day is", r"date today"]
            }
            
            # –®–∞–±–ª–æ–Ω–∏ –¥–ª—è –ø–∞—Ç–µ—Ä–Ω—ñ–≤ –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
            time_regexes = time_patterns.get(self.language, time_patterns["en"])
            date_regexes = date_patterns.get(self.language, date_patterns["en"])
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏ —á–∞—Å—É
            command_lower = command.lower()
            for pattern in time_regexes:
                if re.search(pattern, command_lower):
                    now = datetime.now()
                    
                    if self.language == "uk":
                        return f"–ó–∞—Ä–∞–∑ {now.hour:02d}:{now.minute:02d}"
                    elif self.language == "de":
                        return f"Es ist jetzt {now.hour:02d}:{now.minute:02d} Uhr"
                    else:  # en
                        return f"It's {now.hour:02d}:{now.minute:02d}"
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –∫–æ–º–∞–Ω–¥–∏ –¥–∞—Ç–∏
            for pattern in date_regexes:
                if re.search(pattern, command_lower):
                    now = datetime.now()
                    
                    if self.language == "uk":
                        months = ["—Å—ñ—á–Ω—è", "–ª—é—Ç–æ–≥–æ", "–±–µ—Ä–µ–∑–Ω—è", "–∫–≤—ñ—Ç–Ω—è", "—Ç—Ä–∞–≤–Ω—è", "—á–µ—Ä–≤–Ω—è", 
                                 "–ª–∏–ø–Ω—è", "—Å–µ—Ä–ø–Ω—è", "–≤–µ—Ä–µ—Å–Ω—è", "–∂–æ–≤—Ç–Ω—è", "–ª–∏—Å—Ç–æ–ø–∞–¥–∞", "–≥—Ä—É–¥–Ω—è"]
                        weekdays = ["–ø–æ–Ω–µ–¥—ñ–ª–æ–∫", "–≤—ñ–≤—Ç–æ—Ä–æ–∫", "—Å–µ—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä", 
                                   "–ø'—è—Ç–Ω–∏—Ü—è", "—Å—É–±–æ—Ç–∞", "–Ω–µ–¥—ñ–ª—è"]
                        return f"–°—å–æ–≥–æ–¥–Ω—ñ {weekdays[now.weekday()]}, {now.day} {months[now.month-1]} {now.year} —Ä–æ–∫—É"
                        
                    elif self.language == "de":
                        months = ["Januar", "Februar", "M√§rz", "April", "Mai", "Juni", 
                                 "Juli", "August", "September", "Oktober", "November", "Dezember"]
                        weekdays = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", 
                                   "Freitag", "Samstag", "Sonntag"]
                        return f"Heute ist {weekdays[now.weekday()]}, der {now.day}. {months[now.month-1]} {now.year}"
                        
                    else:  # en
                        months = ["January", "February", "March", "April", "May", "June", 
                                 "July", "August", "September", "October", "November", "December"]
                        weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", 
                                   "Friday", "Saturday", "Sunday"]
                        return f"Today is {weekdays[now.weekday()]}, {months[now.month-1]} {now.day}, {now.year}"
            
            # 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏
            # –í–∫–ª—é—á–µ–Ω–Ω—è –º—É–∑–∏–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)
            if any(x in command_lower for x in ["–≥—Ä–∞–π –º—É–∑–∏–∫", "play music", "musik spielen"]):
                if self.language == "uk":
                    return "–í–∏–±–∞—á—Ç–µ, —Ñ—É–Ω–∫—Ü—ñ—è –º—É–∑–∏–∫–∏ –ø–æ–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
                elif self.language == "de":
                    return "Entschuldigung, die Musikfunktion ist noch nicht verf√ºgbar."
                else:
                    return "Sorry, the music function is not available yet."

            # –ö–∞–ª–µ–Ω–¥–∞—Ä (–∑–∞–≥–ª—É—à–∫–∞)
            if any(x in command_lower for x in ["–∫–∞–ª–µ–Ω–¥–∞—Ä", "calendar", "kalender"]):
                if self.language == "uk":
                    return "–§—É–Ω–∫—Ü—ñ—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ."
                elif self.language == "de":
                    return "Die Kalenderfunktion befindet sich in der Entwicklung."
                else:
                    return "The calendar function is under development."
                    
            # 3. –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ OpenAI –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            try:
                from openai import OpenAI
                from core.api_manager import api_manager
                
                # –û—Ç—Ä–∏–º—É—î–º–æ API –∫–ª—é—á –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π
                api_key = api_manager.get_openai_key(self.user_id)
                
                if api_key:
                    client = OpenAI(api_key=api_key)
                    
                    # –§–æ—Ä–º—É—î–º–æ —Å–∏—Å—Ç–µ–º–Ω–∏–π –ø—Ä–æ–º—Ç –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ
                    system_prompt = "–¢–∏ –≥–æ–ª–æ—Å–æ–≤–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –∫–æ—Ä–æ—Ç–∫–æ."
                    
                    # –î–æ–¥–∞—î–º–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–≤–∏
                    if self.language == "uk":
                        system_prompt += " –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é."
                    elif self.language == "de":
                        system_prompt += " Antworte auf Deutsch."
                    else:
                        system_prompt += " Answer in English."
                    
                    # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π –ø—Ä–æ–º—Ç –æ—Å–æ–±–∏—Å—Ç–æ—Å—Ç—ñ
                    if self.personality:
                        system_prompt += f"\n\n–î–æ–¥–∞—Ç–∫–æ–≤—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: {self.personality}"
                    
                    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –¥–æ OpenAI
                    response = client.chat.completions.create(
                        model="gpt-3.5-turbo",
                        messages=[
                            {"role": "system", "content": system_prompt},
                            {"role": "user", "content": command}
                        ],
                        max_tokens=150
                    )
                    
                    if response.choices and response.choices[0].message:
                        content = response.choices[0].message.content
                        return content if content is not None else "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
                        
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI
                raise Exception("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI")
                    
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ OpenAI: {e}")
                # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ OpenAI - –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≥–ª—É—à–∫—É
                pass
                
            # 4. –ó–∞–≥–ª—É—à–∫–∞ —è–∫—â–æ –Ω—ñ—â–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ
            responses = {
                "uk": [
                    f"–í–∏ —Å–∫–∞–∑–∞–ª–∏: {command}",
                    "–í–∏–±–∞—á—Ç–µ, —è –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤ –∫–æ–º–∞–Ω–¥—É. –ú–æ–∂–µ—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏?",
                    "–ù–µ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ —è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑—Ä–æ–∑—É–º—ñ–≤ –∑–∞–ø–∏—Ç."
                ],
                "de": [
                    f"Sie haben gesagt: {command}",
                    "Entschuldigung, ich habe den Befehl nicht verstanden. K√∂nnen Sie wiederholen?",
                    "Ich bin nicht sicher, ob ich Ihre Anfrage verstanden habe."
                ],
                "en": [
                    f"You said: {command}",
                    "Sorry, I didn't understand the command. Can you repeat?",
                    "I'm not sure I understood your request correctly."
                ]
            }
            
            # –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ—ó –º–æ–≤–∏
            language_responses = responses.get(self.language, responses["en"])
            return random.choice(language_responses)
            
        except Exception as e:
            print(f"‚ùå –ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∫–æ–º–∞–Ω–¥–∏: {e}")
            
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–≤–∏
            if self.language == "uk":
                return "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ—ó –∫–æ–º–∞–Ω–¥–∏."
            elif self.language == "de":
                return "Entschuldigung, bei der Verarbeitung Ihres Befehls ist ein Fehler aufgetreten."
            else:  # en
                return "Sorry, an error occurred while processing your command."
        
    def stop(self):
        """–ó—É–ø–∏–Ω—è—î daemon"""
        self.is_running = False
        self.wake_word.stop()
        try:
            led_controller.stop_animation()
            led_controller.turn_off()
        except Exception:
            pass
        print("üõë Daemon –∑—É–ø–∏–Ω–µ–Ω–æ")


if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫
    # TODO: –í–∑—è—Ç–∏ telegram_user_id –∑ —è–∫–æ–≥–æ—Å—å –∫–æ–Ω—Ñ—ñ–≥–∞
    daemon = VoiceDaemon(telegram_user_id=123456789)
    daemon.start()


