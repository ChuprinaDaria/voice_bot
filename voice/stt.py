from __future__ import annotations

from typing import BinaryIO
from io import BytesIO

from openai import OpenAI

from core.api_manager import api_manager


class NamedBytesIO(BytesIO):
    """In-memory bytes buffer –∑ —ñ–º–µ–Ω–µ–º —Ñ–∞–π–ª—É –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ –∑ OpenAI SDK."""
    def __init__(self, initial_bytes: bytes, name: str):
        super().__init__(initial_bytes)
        self.name = name  # –¥–µ—è–∫—ñ SDK –æ—á—ñ–∫—É—é—Ç—å –∞—Ç—Ä–∏–±—É—Ç .name


def transcribe_audio(telegram_user_id: int, audio_file: str | bytes | BinaryIO, language: str = "uk") -> str:
    """
    –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è–º OpenAI Whisper –±–µ–∑ –∑–∞–ø–∏—Å—É –Ω–∞ –¥–∏—Å–∫.
    
    Args:
        telegram_user_id: ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ Telegram
        audio_file: –ê—É–¥—ñ–æ —Ñ–∞–π–ª (—à–ª—è—Ö, bytes –∞–±–æ BinaryIO)
        language: –ú–æ–≤–∞ –∞—É–¥—ñ–æ (uk, en, de) –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ç–æ—á–Ω–æ—Å—Ç—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
    
    Returns:
        –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
    """
    import time
    start_time = time.time()
    
    api_key = api_manager.get_openai_key(telegram_user_id)
    client = OpenAI(api_key=api_key)
    
    print("üéß –†–æ–∑–ø—ñ–∑–Ω–∞—é –≥–æ–ª–æ—Å —á–µ—Ä–µ–∑ Whisper...")

    # Whisper API –ø—Ä–∏–π–º–∞—î ISO 639-1 –∫–æ–¥–∏ –º–æ–≤
    # uk = —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞, en = –∞–Ω–≥–ª—ñ–π—Å—å–∫–∞, de = –Ω—ñ–º–µ—Ü—å–∫–∞
    if isinstance(audio_file, str):
        with open(audio_file, "rb") as f:
            response = client.audio.transcriptions.create(
                model="whisper-1", 
                file=f,
                language=language  # –í–∫–∞–∑—É—î–º–æ –º–æ–≤—É –¥–ª—è —Ç–æ—á–Ω—ñ—à–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
            )
    elif isinstance(audio_file, bytes):
        # –û–±—Ä–æ–±–∫–∞ in-memory bytes –±–µ–∑ —Ñ–∞–π–ª–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
        buffer = NamedBytesIO(audio_file, name="audio.wav")
        response = client.audio.transcriptions.create(
            model="whisper-1", 
            file=buffer,
            language=language
        )
    else:
        # BinaryIO (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–∂–µ –≤—ñ–¥–∫—Ä–∏—Ç–∏–π —Ñ–∞–π–ª/–±—É—Ñ–µ—Ä)
        response = client.audio.transcriptions.create(
            model="whisper-1", 
            file=audio_file,
            language=language
        )
    
    elapsed = time.time() - start_time
    print(f"‚è±Ô∏è  STT (Whisper) –≤—ñ–¥–ø–æ–≤—ñ–ª–∞ –∑–∞ {elapsed:.1f}s")

    return getattr(response, "text", "")


