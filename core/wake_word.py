"""
Wake word detection —á–µ—Ä–µ–∑ Porcupine (Picovoice)
–ó fallback —Ä–µ–∂–∏–º–æ–º –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ API –∫–ª—é—á–∞
"""

import pyaudio
import struct
import time
from typing import Optional, Any, cast

from config import get_settings

# –°–ø—Ä–æ–±–∞ —ñ–º–ø–æ—Ä—Ç—É Porcupine
pvporcupine: Any | None = None
try:
    import pvporcupine as _pvporcupine  # type: ignore
    pvporcupine = _pvporcupine
    PORCUPINE_AVAILABLE = True
except ImportError:
    PORCUPINE_AVAILABLE = False
    print("‚ö†Ô∏è  pvporcupine –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. Wake word detection –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")


class WakeWordDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä wake word –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é Porcupine —ñ fallback"""
    
    def __init__(self, wake_word: Optional[str] = None):
        settings = get_settings()
        self.wake_word = wake_word or settings.wake_word
        self.access_key = settings.picovoice_access_key
        
        self.porcupine = None
        self.audio_stream = None
        self.pa = None
        
        # –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
        self.use_porcupine = PORCUPINE_AVAILABLE and self.access_key
        
        if self.use_porcupine:
            self._init_porcupine()
        else:
            print("‚ö†Ô∏è  –ü—Ä–∞—Ü—é—é –≤ FALLBACK —Ä–µ–∂–∏–º—ñ (–±–µ–∑ wake word detection)")
            print("    –î–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è - –ø—Ä–æ—Å—Ç–æ –Ω–∞—Ç–∏—Å–Ω–∏ Enter –≤ –∫–æ–Ω—Å–æ–ª—ñ")
        
    def _init_porcupine(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Porcupine"""
        try:
            keywords = []
            if self.wake_word.lower() in ["hey google", "ok google", "alexa", "computer", "jarvis"]:
                keywords = [self.wake_word.lower()]
            else:
                print(f"‚ö†Ô∏è  Wake word '{self.wake_word}' –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è.")
                print("    –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é 'hey google' –∑–∞–º—ñ—Å—Ç—å.")
                keywords = ["hey google"]
            
            porcupine_mod = cast(Any, pvporcupine)
            self.porcupine = porcupine_mod.create(
                access_key=self.access_key,
                keywords=keywords
            )
            
            self.pa = pyaudio.PyAudio()
            self.audio_stream = self.pa.open(
                rate=self.porcupine.sample_rate,
                channels=1,
                format=pyaudio.paInt16,
                input=True,
                frames_per_buffer=self.porcupine.frame_length
            )
            
            print(f"‚úÖ Porcupine —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ. Wake word: {keywords[0]}")
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó Porcupine: {e}")
            self.use_porcupine = False
            
    def listen(self) -> bool:
        """
        –°–ª—É—Ö–∞—î wake word
        Returns True –∫–æ–ª–∏ –ø–æ—á—É–≤
        """
        if self.use_porcupine:
            return self._listen_porcupine()
        else:
            return self._listen_fallback()
            
    def _listen_porcupine(self) -> bool:
        """–ü—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ Porcupine"""
        if not self.audio_stream or not self.porcupine:
            return False
            
        try:
            pcm = self.audio_stream.read(
                self.porcupine.frame_length,
                exception_on_overflow=False
            )
            pcm = struct.unpack_from("h" * self.porcupine.frame_length, pcm)
            
            keyword_index = self.porcupine.process(pcm)
            
            if keyword_index >= 0:
                print(f"üé§ Wake word detected: {self.wake_word}")
                return True
                
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è: {e}")
            
        return False
        
    def _listen_fallback(self) -> bool:
        """Fallback —Ä–µ–∂–∏–º - —á–µ–∫–∞—î–º–æ Enter –≤ –∫–æ–Ω—Å–æ–ª—ñ"""
        print("\n[FALLBACK MODE] –ù–∞—Ç–∏—Å–Ω–∏ Enter —â–æ–± —Å–∏–º—É–ª—é–≤–∞—Ç–∏ wake word...")
        try:
            input()
            return True
        except (KeyboardInterrupt, EOFError):
            return False
            
    def stop(self):
        """–ó—É–ø–∏–Ω—è—î –ø—Ä–æ—Å–ª—É—Ö–æ–≤—É–≤–∞–Ω–Ω—è —ñ –∑–≤—ñ–ª—å–Ω—è—î —Ä–µ—Å—É—Ä—Å–∏"""
        if self.audio_stream:
            self.audio_stream.stop_stream()
            self.audio_stream.close()
            
        if self.pa:
            self.pa.terminate()
            
        if self.porcupine:
            self.porcupine.delete()
            
        print("üõë Wake word detector –∑—É–ø–∏–Ω–µ–Ω–æ")

