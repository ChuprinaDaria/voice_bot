"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –º–æ–¥—É–ª—å wake_word.py –¥–ª—è Raspberry Pi 5
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î Voice Activity Detection –∑–∞–º—ñ—Å—Ç—å Porcupine
"""

import pyaudio
import struct
import time
import wave
import numpy as np
import threading
from typing import Optional, Any, List, Callable
import os
import audioop
from enum import Enum

from config import get_settings


class WakeWordMode(Enum):
    """–†–µ–∂–∏–º–∏ —Ä–æ–±–æ—Ç–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ wake word"""
    FALLBACK = "fallback"  # –†–µ–∂–∏–º –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Enter –≤ –∫–æ–Ω—Å–æ–ª—ñ
    VAD = "vad"  # –†–µ–∂–∏–º –¥–µ—Ç–µ–∫—Ü—ñ—ó –≥–æ–ª–æ—Å–æ–≤–æ—ó –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    ALWAYS_ON = "always_on"  # –ó–∞–≤–∂–¥–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–µ–∂–∏–º (–¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è)


class WakeWordDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä wake word –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é —Ä—ñ–∑–Ω–∏—Ö —Ä–µ–∂–∏–º—ñ–≤"""
    
    def __init__(self, 
                 wake_word: Optional[str] = None,
                 mode: WakeWordMode = WakeWordMode.VAD,
                 sensitivity: float = 0.6):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
        
        Args:
            wake_word: –ö–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ø—Ä–∏–≤—ñ—Ç –±–æ—Ç")
            mode: –†–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏
            sensitivity: –ß—É—Ç–ª–∏–≤—ñ—Å—Ç—å –¥–µ—Ç–µ–∫—Ü—ñ—ó (0-1)
        """
        self.settings = get_settings()
        self.wake_word = wake_word or self.settings.wake_word
        self.sensitivity = max(0.0, min(1.0, sensitivity))
        
        # –ê—É–¥—ñ–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        self.sample_rate = 16000
        self.chunk_size = 1024
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∞—É–¥—ñ–æ-–ø–æ–ª—è –î–û –±—É–¥—å-—è–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π —ñ–∑ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–æ–º
        self.audio = None
        self.stream = None
        self.is_running = True

        # –í–∏–±—ñ—Ä —Ä–µ–∂–∏–º—É (–¥–ª—è Pi 5 —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ VAD)
        if mode == WakeWordMode.ALWAYS_ON:
            self.mode = mode
            print("üîÑ Wake word –≤ —Ä–µ–∂–∏–º—ñ ALWAYS_ON (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü—ñ—è)")
        elif mode == WakeWordMode.VAD:
            self.mode = mode
            self._init_vad()
        else:
            # Fallback —Ä–µ–∂–∏–º
            self.mode = WakeWordMode.FALLBACK
            print("üîÑ Wake word –≤ —Ä–µ–∂–∏–º—ñ FALLBACK (–Ω–∞—Ç–∏—Å–Ω–∏ Enter)")
    
    def _init_vad(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Voice Activity Detection"""
        print(f"üîÑ Wake word –≤ —Ä–µ–∂–∏–º—ñ VAD (–¥–µ—Ç–µ–∫—Ü—ñ—è –≥–æ–ª–æ—Å—É)")
        
        # VAD –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
        self.vad_threshold = 1000  # –ü–æ—Ä—ñ–≥ –≥—É—á–Ω–æ—Å—Ç—ñ (–∫–æ—Ä–∏–≥—É—î—Ç—å—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ)
        self.vad_min_duration = 0.3  # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–≤—É–∫—É (—Å–µ–∫—É–Ω–¥–∏)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —á–∞–Ω–∫—ñ–≤ –¥–ª—è –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—ó —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∑–≤—É–∫—É
        self.vad_chunks_count = int(self.vad_min_duration * self.sample_rate / self.chunk_size)
        
        # –ö–æ—Ä–∏–≥—É—î–º–æ –ø–æ—Ä—ñ–≥ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á—É—Ç–ª–∏–≤–æ—Å—Ç—ñ
        self.vad_threshold = int(1500 * (1.0 - self.sensitivity) + 500)
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω
        self._open_microphone()
    
    def _open_microphone(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –º—ñ–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å—É –∑ –ø—ñ–¥–±–æ—Ä–æ–º sample rate"""
        try:
            self.audio = pyaudio.PyAudio()

            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω
            device_index = self._find_usb_microphone()

            # –ü—ñ–¥–±–∏—Ä–∞—î–º–æ sample rate, —è–∫—â–æ –ø–æ—Ç–æ—á–Ω–∏–π –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è
            candidate_rates = []
            try:
                if device_index is not None:
                    info = self.audio.get_device_info_by_index(device_index)
                    default_rate = int(float(info.get("defaultSampleRate", self.sample_rate)))
                    candidate_rates.append(default_rate)
            except Exception:
                pass
            # –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ —á–∞—Å—Ç–æ—Ç–∏ —Ç–∞ –ø–æ—Ç–æ—á–Ω—É
            candidate_rates.extend([self.sample_rate, 48000, 44100, 22050, 16000])
            # –£–Ω—ñ–∫–∞–ª—å–Ω—ñ, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ –ø–æ—Ä—è–¥–æ–∫
            seen = set()
            candidate_rates = [r for r in candidate_rates if (r not in seen and not seen.add(r))]

            last_error: Optional[Exception] = None
            for rate in candidate_rates:
                try:
                    stream = self.audio.open(
                        format=pyaudio.paInt16,
                        channels=1,
                        rate=rate,
                        input=True,
                        input_device_index=device_index,
                        frames_per_buffer=self.chunk_size,
                    )
                    # –£—Å–ø—ñ—Ö: —Ñ—ñ–∫—Å—É—î–º–æ –æ–±—Ä–∞–Ω–∏–π rate —ñ –ø–æ—Ç—ñ–∫
                    self.sample_rate = rate
                    self.stream = stream
                    print(
                        f"‚úÖ –ú—ñ–∫—Ä–æ—Ñ–æ–Ω –≤—ñ–¥–∫—Ä–∏—Ç–æ"
                        + (f" (device {device_index})" if device_index is not None else "")
                        + f" @ {rate} Hz"
                    )
                    break
                except Exception as e:
                    last_error = e
                    continue

            if self.stream is None:
                # –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∂–æ–¥–µ–Ω —Ä–µ–∂–∏–º
                raise last_error or OSError("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–∫—Ä–∏—Ç–∏ –º—ñ–∫—Ä–æ—Ñ–æ–Ω –∞–Ω—ñ –∑ –æ–¥–Ω–∏–º sample rate")

        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
            # –ó–∞–∫—Ä–∏–≤–∞—î–º–æ –≤—Å–µ, —â–æ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏–ª–∏
            self._cleanup_audio()
            
    def _find_usb_microphone(self) -> Optional[int]:
        """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —ñ–Ω–¥–µ–∫—Å USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞"""
        if self.audio is None:
            return None
            
        try:
            # –ü–µ—Ä–µ–±–∏—Ä–∞—î–º–æ –≤—Å—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó
            for i in range(self.audio.get_device_count()):
                try:
                    info = self.audio.get_device_info_by_index(i)
                    name = str(info.get('name', '')).lower()
                    
                    # –®—É–∫–∞—î–º–æ USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω
                    max_input_channels = int(info.get('maxInputChannels', 0))
                    if 'usb' in name and max_input_channels > 0:
                        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω: {name}")
                        return i
                except Exception:
                    continue
                    
            # –Ø–∫—â–æ USB –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ - –±—É–¥—å-—è–∫–∏–π –≤—Ö—ñ–¥–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π
            for i in range(self.audio.get_device_count()):
                try:
                    info = self.audio.get_device_info_by_index(i)
                    max_input_channels = int(info.get('maxInputChannels', 0))
                    
                    if max_input_channels > 0:
                        name = str(info.get('name', ''))
                        print(f"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤—Ö—ñ–¥–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π: {name}")
                        return i
                except Exception:
                    continue
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞: {e}")
            
        return None
        
    def listen(self) -> bool:
        """
        –°–ª—É—Ö–∞—î wake word
        
        Returns:
            True —è–∫—â–æ wake word –≤–∏—è–≤–ª–µ–Ω–æ
        """
        if self.mode == WakeWordMode.FALLBACK:
            return self._listen_fallback()
        elif self.mode == WakeWordMode.VAD:
            return self._listen_vad()
        elif self.mode == WakeWordMode.ALWAYS_ON:
            return self._listen_always_on()
        
        # –Ø–∫—â–æ –Ω–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∂–∏–º
        return False
    
    def _listen_fallback(self) -> bool:
        """Fallback —Ä–µ–∂–∏–º - –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è Enter –≤ –∫–æ–Ω—Å–æ–ª—ñ"""
        print("\n[FALLBACK MODE] –ù–∞—Ç–∏—Å–Ω–∏ Enter —â–æ–± —Å–∏–º—É–ª—é–≤–∞—Ç–∏ wake word...")
        try:
            input()
            return True
        except (KeyboardInterrupt, EOFError):
            return False
    
    def _listen_vad(self) -> bool:
        """Voice Activity Detection - –≤–∏—è–≤–ª–µ–Ω–Ω—è –∑–≤—É–∫—É"""
        if self.stream is None:
            # –°–ø—Ä–æ–±–∞ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –∑–Ω–æ–≤—É
            self._open_microphone()
            
            # –Ø–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è
            if self.stream is None:
                return False
        
        try:
            active_chunks = 0
            
            # –í–∏–≤–æ–¥–∏–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è —Ç—ñ–ª—å–∫–∏ —Ä–∞–∑ –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ü–∏–∫–ª—É
            print("üé§ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–≤—É–∫—É...")
            
            while True:
                try:
                    # –ß–∏—Ç–∞—î–º–æ –∞—É–¥—ñ–æ
                    data = self.stream.read(self.chunk_size, exception_on_overflow=False)
                    
                    # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≥—É—á–Ω—ñ—Å—Ç—å
                    rms = audioop.rms(data, 2)  # 2 bytes per sample (16 bit)
                    
                    # –ü–æ—Ä—ñ–≤–Ω—é—î–º–æ –∑ –ø–æ—Ä–æ–≥–æ–º
                    if rms > self.vad_threshold:
                        active_chunks += 1
                        if active_chunks >= self.vad_chunks_count:
                            print("üé§ –ì–æ–ª–æ—Å–æ–≤—É –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≤–∏—è–≤–ª–µ–Ω–æ!")
                            return True
                    else:
                        # –°–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —è–∫—â–æ —Ç–∏—à–∞
                        active_chunks = 0
                        
                except IOError:
                    # –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è - –ø–µ—Ä–µ–≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ—Ç—ñ–∫
                    self._cleanup_audio()
                    self._open_microphone()
                    if self.stream is None:
                        return False
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Ä–∏–≤–∞–Ω–Ω—è
                if not self.is_running:
                    return False
                
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –≤ —Ä–µ–∂–∏–º—ñ VAD: {e}")
            return False
    
    def _listen_always_on(self) -> bool:
        """–†–µ–∂–∏–º –±–µ–∑ wake word - –≤—ñ–¥—Ä–∞–∑—É –ø–æ–≤–µ—Ä—Ç–∞—î True"""
        # –ú–∞–ª–µ–Ω—å–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è —ñ–º—ñ—Ç–∞—Ü—ñ—ó –¥–µ—Ç–µ–∫—Ü—ñ—ó
        time.sleep(0.5)
        return True
    
    def _cleanup_audio(self):
        """–ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∞—É–¥—ñ–æ —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        if self.stream:
            try:
                self.stream.stop_stream()
                self.stream.close()
            except Exception:
                pass
            self.stream = None
            
        if self.audio:
            try:
                self.audio.terminate()
            except Exception:
                pass
            self.audio = None
    
    def stop(self):
        """–ó—É–ø–∏–Ω—è—î –¥–µ—Ç–µ–∫—Ç–æ—Ä —ñ –∑–≤—ñ–ª—å–Ω—è—î —Ä–µ—Å—É—Ä—Å–∏"""
        self.is_running = False
        self._cleanup_audio()
        print("üõë Wake word detector –∑—É–ø–∏–Ω–µ–Ω–æ")


# –¢–µ—Å—Ç
if __name__ == "__main__":
    print("=== Test Wake Word Detector ===")
    
    detector = WakeWordDetector(mode=WakeWordMode.VAD)
    
    try:
        detector.is_running = True
        count = 0
        while count < 3:
            print(f"\n–¢–µ—Å—Ç {count+1}/3...")
            if detector.listen():
                print("‚úÖ Wake word –≤–∏—è–≤–ª–µ–Ω–æ!")
                count += 1
                time.sleep(1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç –ø–µ—Ä–µ—Ä–≤–∞–Ω–æ")
    finally:
        detector.stop()
        print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ")