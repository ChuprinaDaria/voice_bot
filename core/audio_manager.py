"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ –∑–≤—É–∫–æ–º –Ω–∞ Raspberry Pi
- USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å—É
- 3.5mm –∞—É–¥—ñ–æ –≤–∏—Ö—ñ–¥ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
- –î–æ–¥–∞–Ω–æ –¥–æ–¥–∞—Ç–∫–æ–≤—É –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫ —Ç–∞ fallback —Ä–µ–∂–∏–º
"""

import pyaudio
import wave
import audioop
from io import BytesIO
from typing import Optional, List, Tuple, Dict
import time
import os
import subprocess


class AudioManager:
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ –∑–∞–ø–∏—Å–æ–º —ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∑ –ø–æ–∫—Ä–∞—â–µ–Ω–æ—é –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫"""
    
    def __init__(self):
        self.sample_rate = 16000  # 16kHz –¥–ª—è Whisper
        self.channels = 1  # mono
        self.chunk = 1024
        self.format = pyaudio.paInt16
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ –∞—É–¥—ñ–æ —Å–∏—Å—Ç–µ–º—É
        self._prepare_audio_system()
        
        # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è PyAudio
        self.pa = pyaudio.PyAudio()
        
        # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó
        self._detect_devices()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
        self.input_device_index = self._find_usb_microphone()
        
        if self.input_device_index is None:
            print("‚ö†Ô∏è  USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π.")
        else:
            print(f"‚úÖ USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ: device {self.input_device_index}")
    
    def _prepare_audio_system(self):
        """–ì–æ—Ç—É—î –∞—É–¥—ñ–æ —Å–∏—Å—Ç–µ–º—É - –ø–µ—Ä–µ–≤—ñ—Ä—è—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å alsa.conf —ñ –º–æ–¥—É–ª—ñ–≤ —è–¥—Ä–∞"""
        try:
            # –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ aplay -l –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞—É–¥—ñ–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
            result = subprocess.run(
                ["aplay", "-l"], 
                capture_output=True, 
                text=True, 
                check=False
            )
            
            if result.returncode != 0:
                print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º–∞ –∑ –∞—É–¥—ñ–æ —Å–∏—Å—Ç–µ–º–æ—é:")
                print(result.stderr)
                print("–°–ø—Ä–æ–±–∞ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è...")
                
                # –ú–æ–∂–ª–∏–≤–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ snd-usb-audio –º–æ–¥—É–ª—å
                subprocess.run(["sudo", "modprobe", "snd-usb-audio"], check=False)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –Ω–∞—à—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó –≤ /proc/asound
                if os.path.exists("/proc/asound/cards"):
                    with open("/proc/asound/cards", 'r') as f:
                        print("–î–æ—Å—Ç—É–ø–Ω—ñ –∑–≤—É–∫–æ–≤—ñ –∫–∞—Ä—Ç–∏:")
                        print(f.read())
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥–≥–æ—Ç–æ–≤—Ü—ñ –∞—É–¥—ñ–æ —Å–∏—Å—Ç–µ–º–∏: {e}")

    def _detect_devices(self):
        """–°–ø—Ä–æ–±–∞ –≤–∏—è–≤–∏—Ç–∏ –≤—Å—ñ –∞—É–¥—ñ–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó —Ç–∞ –∑–±–µ—Ä–µ–≥—Ç–∏ —ó—Ö —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é"""
        self.devices = []
        try:
            device_count = self.pa.get_device_count()
            print(f"–ó–Ω–∞–π–¥–µ–Ω–æ {device_count} –∞—É–¥—ñ–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤.")
            
            # –ó–±–∏—Ä–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó
            for i in range(device_count):
                try:
                    info = self.pa.get_device_info_by_index(i)
                    self.devices.append(info)
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π {i}: {e}")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏—è–≤–ª–µ–Ω–Ω—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤: {e}")
    
    def _find_usb_microphone(self) -> Optional[int]:
        """–®—É–∫–∞—î USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω –∞–±–æ –±—É–¥—å-—è–∫–∏–π —ñ–Ω—à–∏–π —Ä–æ–±–æ—á–∏–π –º—ñ–∫—Ä–æ—Ñ–æ–Ω"""
        # –°–ø–æ—á–∞—Ç–∫—É —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω
        for i, info in enumerate(self.devices):
            try:
                name = str(info.get('name', '')).lower()
                max_input_channels = int(info.get('maxInputChannels', 0))
                
                # –®—É–∫–∞—î–º–æ USB –≤ –Ω–∞–∑–≤—ñ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ INPUT –ø—Ä–∏—Å—Ç—Ä—ñ–π
                if 'usb' in name and max_input_channels > 0:
                    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω: {name}")
                    return i
            except Exception:
                continue
        
        # –Ø–∫—â–æ USB –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å–ø—Ä–æ–±—É—î–º–æ –±—É–¥—å-—è–∫–∏–π –≤—Ö—ñ–¥–Ω–∏–π –ø—Ä–∏—Å—Ç—Ä—ñ–π
        for i, info in enumerate(self.devices):
            try:
                max_input_channels = int(info.get('maxInputChannels', 0))
                if max_input_channels > 0:
                    name = str(info.get('name', ''))
                    print(f"–ó–Ω–∞–π–¥–µ–Ω–æ –≤—Ö—ñ–¥–Ω–∏–π –∞—É–¥—ñ–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π: {name}")
                    return i
            except Exception:
                continue
                
        # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ None
        print("‚ö†Ô∏è  –ñ–æ–¥–Ω–æ–≥–æ —Ä–æ–±–æ—á–æ–≥–æ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
        return None
    
    def list_devices(self):
        """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞—É–¥—ñ–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ (–¥–ª—è –¥–µ–±–∞–≥—É)"""
        print("\n" + "=" * 60)
        print("üì° AUDIO DEVICES")
        print("=" * 60)
        
        for i, info in enumerate(self.devices):
            try:
                print(f"\nDevice {i}:")
                print(f"  Name: {info.get('name')}")
                print(f"  Input channels: {info.get('maxInputChannels')}")
                print(f"  Output channels: {info.get('maxOutputChannels')}")
                print(f"  Sample rate: {info.get('defaultSampleRate')}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–≤–µ–¥–µ–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø—Ä–∏—Å—Ç—Ä—ñ–π {i}: {e}")
            
        print("=" * 60 + "\n")
    
    def record_audio(self, duration: int = 5) -> bytes:
        """–ó–∞–ø–∏—Å—É—î N —Å–µ–∫—É–Ω–¥ –∞—É–¥—ñ–æ –∑ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞"""
        print(f"üé§ –ó–∞–ø–∏—Å {duration} —Å–µ–∫—É–Ω–¥...")
        
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–∞—Ü—é—î –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Ç–æ–∫—É
            try:
                stream = self.pa.open(
                    format=self.format,
                    channels=self.channels,
                    rate=self.sample_rate,
                    input=True,
                    input_device_index=self.input_device_index,
                    frames_per_buffer=self.chunk
                )
            except OSError as e:
                # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∑ –ø—Ä–∏—Å—Ç—Ä–æ—î–º, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞—É–¥—ñ–æ –ø–æ—Ç–æ–∫—É: {e}")
                print("–°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é...")
                
                stream = self.pa.open(
                    format=self.format,
                    channels=self.channels,
                    rate=self.sample_rate,
                    input=True,
                    frames_per_buffer=self.chunk
                )
            
            frames = []
            for _ in range(0, int(self.sample_rate / self.chunk * duration)):
                data = stream.read(self.chunk, exception_on_overflow=False)
                frames.append(data)
                
            stream.stop_stream()
            stream.close()
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç
            return self._frames_to_wav(frames)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∞—É–¥—ñ–æ: {e}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—É WAV
            return self._generate_empty_wav(duration)
    
    def record_until_silence(
        self, 
        silence_threshold: int = 500,
        silence_duration: float = 1.5,
        max_duration: int = 10
    ) -> bytes:
        """
        –ó–∞–ø–∏—Å—É—î –ø–æ–∫–∏ –Ω–µ –±—É–¥–µ —Ç–∏—à–∞ –ø—Ä–æ—Ç—è–≥–æ–º silence_duration —Å–µ–∫—É–Ω–¥
        
        Args:
            silence_threshold: –ü–æ—Ä—ñ–≥ —Ç–∏—à—ñ (RMS amplitude)
            silence_duration: –°–∫—ñ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥ —Ç–∏—à—ñ = –∫—ñ–Ω–µ—Ü—å –∑–∞–ø–∏—Å—É
            max_duration: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞–ø–∏—Å—É
        """
        print("üé§ –ó–∞–ø–∏—Å –¥–æ —Ç–∏—à—ñ...")
        
        try:
            # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –ø—Ä–∞—Ü—é—î –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ—Ç–æ–∫—É
            try:
                stream = self.pa.open(
                    format=self.format,
                    channels=self.channels,
                    rate=self.sample_rate,
                    input=True,
                    input_device_index=self.input_device_index,
                    frames_per_buffer=self.chunk
                )
            except OSError as e:
                # –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞ –∑ –ø—Ä–∏—Å—Ç—Ä–æ—î–º, —Å–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π
                print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∞—É–¥—ñ–æ –ø–æ—Ç–æ–∫—É: {e}")
                print("–°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ –ø—Ä–∏—Å—Ç—Ä–æ—é...")
                
                stream = self.pa.open(
                    format=self.format,
                    channels=self.channels,
                    rate=self.sample_rate,
                    input=True,
                    frames_per_buffer=self.chunk
                )
            
            frames = []
            silent_chunks = 0
            chunks_per_silence = int(self.sample_rate / self.chunk * silence_duration)
            max_chunks = int(self.sample_rate / self.chunk * max_duration)
            
            start_time = time.time()
            
            while len(frames) < max_chunks:
                data = stream.read(self.chunk, exception_on_overflow=False)
                frames.append(data)
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–≤–µ–Ω—å –∑–≤—É–∫—É (RMS)
                rms = audioop.rms(data, 2)  # 2 bytes per sample (paInt16)
                
                if rms < silence_threshold:
                    silent_chunks += 1
                else:
                    silent_chunks = 0
                    
                # –Ø–∫—â–æ —Ç–∏—à–∞ –ø—Ä–æ—Ç—è–≥–æ–º silence_duration
                if silent_chunks > chunks_per_silence:
                    print(f"üîá –¢–∏—à–∞ {silence_duration}s detected. –ó—É–ø–∏–Ω—è—é –∑–∞–ø–∏—Å.")
                    break
                    
            elapsed = time.time() - start_time
            print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {elapsed:.1f}s")
            
            stream.stop_stream()
            stream.close()
            
            return self._frames_to_wav(frames)
            
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Å—É –∞—É–¥—ñ–æ: {e}")
            # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç—É WAV
            return self._generate_empty_wav(max_duration)
    
    def _generate_empty_wav(self, duration: int = 3) -> bytes:
        """–ì–µ–Ω–µ—Ä—É—î –ø—É—Å—Ç—É WAV —è–∫ fallback —è–∫—â–æ –∑–∞–ø–∏—Å –Ω–µ –≤–¥–∞–≤—Å—è"""
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–∏—à—É (–∑–∞–ø–æ–≤–Ω–µ–Ω—É –Ω—É–ª—è–º–∏)
        num_samples = int(self.sample_rate * duration)
        frames = [b'\x00\x00' * self.chunk] * (num_samples // self.chunk)
        return self._frames_to_wav(frames)
        
    def _frames_to_wav(self, frames: list) -> bytes:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Å–ø–∏—Å–æ–∫ —Ñ—Ä–µ–π–º—ñ–≤ –≤ WAV bytes"""
        buffer = BytesIO()
        
        with wave.open(buffer, 'wb') as wf:
            wf.setnchannels(self.channels)
            wf.setsampwidth(self.pa.get_sample_size(self.format))
            wf.setframerate(self.sample_rate)
            wf.writeframes(b''.join(frames))
            
        return buffer.getvalue()
        
    def play_audio(self, audio_data: bytes) -> None:
        """
        –í—ñ–¥—Ç–≤–æ—Ä—é—î –∞—É–¥—ñ–æ —á–µ—Ä–µ–∑ 3.5mm –≤–∏—Ö—ñ–¥
        –ü—ñ–¥—Ç—Ä–∏–º—É—î WAV —ñ MP3 (—á–µ—Ä–µ–∑ pydub)
        –î–æ–¥–∞–Ω–æ –∫—Ä–∞—â—É –æ–±—Ä–æ–±–∫—É –ø–æ–º–∏–ª–æ–∫
        """
        if not audio_data:
            print("‚ö†Ô∏è  –ü—É—Å—Ç—ñ –∞—É–¥—ñ–æ –¥–∞–Ω—ñ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è")
            return
            
        try:
            # –°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —è–∫ WAV
            buffer = BytesIO(audio_data)
            
            with wave.open(buffer, 'rb') as wf:
                try:
                    stream = self.pa.open(
                        format=self.pa.get_format_from_width(wf.getsampwidth()),
                        channels=wf.getnchannels(),
                        rate=wf.getframerate(),
                        output=True
                    )
                    
                    # –ß–∏—Ç–∞—î–º–æ —ñ –≤—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –ø–æ —á–∞–Ω–∫–∞—Ö
                    data = wf.readframes(self.chunk)
                    while data:
                        stream.write(data)
                        data = wf.readframes(self.chunk)
                        
                    stream.stop_stream()
                    stream.close()
                except Exception as e:
                    print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—ñ WAV: {e}")
                    # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–∏–π aplay —è–∫ fallback
                    self._play_with_aplay(audio_data)
                
        except wave.Error:
            # –Ø–∫—â–æ –Ω–µ WAV - –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ pydub (MP3)
            try:
                from pydub import AudioSegment  # type: ignore[import-not-found]
                from pydub.playback import play  # type: ignore[import-not-found]
                
                audio = AudioSegment.from_file(BytesIO(audio_data))
                play(audio)
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")
                # –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ —Å–∏—Å—Ç–µ–º–Ω–∏–π aplay —è–∫ fallback
                self._play_with_aplay(audio_data)
    
    def _play_with_aplay(self, audio_data: bytes) -> None:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î aplay –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ —è–∫ fallback"""
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞—É–¥—ñ–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            tmp_file = "/tmp/audio_fallback.wav"
            with open(tmp_file, 'wb') as f:
                f.write(audio_data)
                
            # –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ —á–µ—Ä–µ–∑ aplay
            subprocess.run(["aplay", tmp_file], check=False)
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            os.unlink(tmp_file)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ aplay: {e}")
                
    def cleanup(self):
        """–ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        try:
            self.pa.terminate()
        except Exception as e:
            print(f"‚ö†Ô∏è  –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—ñ PyAudio: {e}")


# –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üéôÔ∏è  –¢–µ—Å—Ç Audio Manager")
    print("=" * 50)
    
    audio_manager = AudioManager()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó
    audio_manager.list_devices()
    
    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å—É
    print("\n[TEST 1] –ó–∞–ø–∏—Å 3 —Å–µ–∫—É–Ω–¥–∏...")
    audio_data = audio_manager.record_audio(duration=3)
    print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {len(audio_data)} bytes")
    
    # –¢–µ—Å—Ç –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
    print("\n[TEST 2] –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è...")
    audio_manager.play_audio(audio_data)
    
    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å—É –¥–æ —Ç–∏—à—ñ
    print("\n[TEST 3] –ó–∞–ø–∏—Å –¥–æ —Ç–∏—à—ñ (—Å–∫–∞–∂–∏ —â–æ—Å—å —ñ –∑–∞–º–æ–≤–∫–Ω–∏)...")
    audio_data = audio_manager.record_until_silence(
        silence_threshold=500,
        silence_duration=2.0,
        max_duration=10
    )
    print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {len(audio_data)} bytes")
    
    audio_manager.cleanup()
    print("\n‚úÖ –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")