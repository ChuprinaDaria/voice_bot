"""
–ü–æ–∫—Ä–∞—â–µ–Ω–∏–π –∫–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ –∑–≤—É–∫–æ–º –Ω–∞ Raspberry Pi –∑ ReSpeaker
- ReSpeaker –¥–ª—è –∑–∞–ø–∏—Å—É (–∑ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—î—é sample rate)
- ReSpeaker –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
"""

from typing import Optional
import pyaudio
import wave
import audioop
from io import BytesIO
import time
import subprocess
import os


class AudioManager:
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ –∑–∞–ø–∏—Å–æ–º —ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è–º –∑ ReSpeaker"""
    
    def __init__(self):
        self.sample_rate = 16000  # Whisper –ø–æ—Ç—Ä–µ–±—É—î 16kHz
        self.channels = 1  # mono
        self.chunk = 1024
        self.format = pyaudio.paInt16
        
        self.pa = pyaudio.PyAudio()
        
        # INPUT: USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω (device 0)
        self.input_device_index = 0
        self.device_rate = 44100
        
        # OUTPUT: ReSpeaker (device 1) - 2 –∫–∞–Ω–∞–ª–∏ –¥–ª—è —Å—Ç–µ—Ä–µ–æ
        self.output_device_index = 1
        
        print(f"‚úÖ INPUT: USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω (device {self.input_device_index})")
        print(f"‚úÖ OUTPUT: ReSpeaker (device {self.output_device_index})")
    
    def record_audio(self, duration: int = 5) -> bytes:
        """–ó–∞–ø–∏—Å—É—î N —Å–µ–∫—É–Ω–¥ –∞—É–¥—ñ–æ –∑ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞"""
        print(f"üé§ –ó–∞–ø–∏—Å {duration} —Å–µ–∫—É–Ω–¥...")
        
        if self.pa is None:
            raise RuntimeError("AudioManager –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π. –í–∏–∫–ª–∏—á—Ç–µ __init__ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å.")
        
        stream = self.pa.open(
            format=self.format,
            channels=1,  # USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω mono
            rate=self.device_rate,  # USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω –ø—Ä–∞—Ü—é—î –Ω–∞ 44100
            input=True,
            input_device_index=self.input_device_index,
            frames_per_buffer=self.chunk
        )
        
        frames = []
        for _ in range(0, int(self.device_rate / self.chunk * duration)):
            data = stream.read(self.chunk, exception_on_overflow=False)
            frames.append(data)
            
        stream.stop_stream()
        stream.close()
        
        # –û–±'—î–¥–Ω—É—î–º–æ –≤—Å—ñ —Ñ—Ä–µ–π–º–∏
        raw_audio = b''.join(frames)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ sample rate: 44100 ‚Üí 16000
        resampled = audioop.ratecv(
            raw_audio,
            2,  # 2 bytes per sample (paInt16)
            1,  # mono
            self.device_rate,  # from 44100
            self.sample_rate,  # to 16000
            None
        )[0]
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç
        return self._bytes_to_wav(resampled)
    
    def record_until_silence(
        self, 
        silence_threshold: int = 500,
        silence_duration: float = 1.5,
        max_duration: int = 10
    ) -> bytes:
        """–ó–∞–ø–∏—Å—É—î –ø–æ–∫–∏ –Ω–µ –±—É–¥–µ —Ç–∏—à–∞"""
        print("üé§ –ó–∞–ø–∏—Å –¥–æ —Ç–∏—à—ñ...")
        print(f"  üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: –ø–æ—Ä—ñ–≥={silence_threshold}, —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å_—Ç–∏—à—ñ={silence_duration}s, –º–∞–∫—Å={max_duration}s")
        
        if self.pa is None:
            raise RuntimeError("AudioManager –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π. –í–∏–∫–ª–∏—á—Ç–µ __init__ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å.")
        
        stream = self.pa.open(
            format=self.format,
            channels=1,
            rate=self.device_rate,  # USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω –ø—Ä–∞—Ü—é—î –Ω–∞ 44100
            input=True,
            input_device_index=self.input_device_index,
            frames_per_buffer=self.chunk
        )
        
        frames = []
        silent_chunks = 0
        chunks_per_silence = int(self.device_rate / self.chunk * silence_duration)
        max_chunks = int(self.device_rate / self.chunk * max_duration)
        
        start_time = time.time()
        
        speech_detected = False
        speech_chunks = 0
        
        while len(frames) < max_chunks:
            data = stream.read(self.chunk, exception_on_overflow=False)
            frames.append(data)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–≤–µ–Ω—å –∑–≤—É–∫—É
            rms = audioop.rms(data, 2)
            
            # –ü–æ–∫–∞–∑—É—î–º–æ RMS –∫–æ–∂–Ω—ñ 10 chunks –¥–ª—è –∫—Ä–∞—â–æ—ó –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            if len(frames) % 10 == 0:
                print(f"  üìä RMS: {rms}, –¢–∏—à–∞: {silent_chunks}/{chunks_per_silence}, –ü–æ—Ä—ñ–≥: {silence_threshold}")
            
            # –Ø–∫—â–æ RMS –≤–∏—â–µ –ø–æ—Ä–æ–≥—É - —Ü–µ –º–æ–≤–∞
            if rms >= silence_threshold:
                speech_detected = True
                speech_chunks += 1
                silent_chunks = 0
                print(f"  üó£Ô∏è –ú–æ–≤–∞ –¥–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–∞! RMS: {rms}")
            else:
                # –Ø–∫—â–æ –º–æ–≤–∞ –≤–∂–µ –±—É–ª–∞ –¥–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–∞, —Ä–∞—Ö—É—î–º–æ —Ç–∏—à—É
                if speech_detected:
                    silent_chunks += 1
                    if silent_chunks > chunks_per_silence:
                        print(f"üîá –¢–∏—à–∞ {silence_duration}s –ø—ñ—Å–ª—è –º–æ–≤–∏ detected.")
                        break
                else:
                    # –Ø–∫—â–æ –º–æ–≤–∞ —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—è, —Å–∫–∏–¥–∞—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ —Ç–∏—à—ñ
                    silent_chunks = 0
                
        elapsed = time.time() - start_time
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –±—É–ª–∞ –¥–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–∞ –º–æ–≤–∞
        if not speech_detected:
            print(f"‚ö†Ô∏è  –ú–æ–≤–∞ –Ω–µ –¥–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–∞ –∑–∞ {elapsed:.1f}s (–º–∞–∫—Å–∏–º—É–º {max_duration}s)")
        else:
            print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {elapsed:.1f}s (–º–æ–≤–∞ –¥–µ—Ç–µ–∫—Ç–æ–≤–∞–Ω–∞)")
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π RMS –∑–Ω–∞—á–µ–Ω–Ω—è
        last_rms = 0
        if frames:
            try:
                last_rms = audioop.rms(frames[-1], 2)
            except:
                last_rms = 0
        
        print(f"  üìä –ü—ñ–¥—Å—É–º–æ–∫: {len(frames)} chunks, –º–æ–≤–∞: {speech_detected}, –æ—Å—Ç–∞–Ω–Ω—ñ–π RMS: {last_rms}")
        
        stream.stop_stream()
        stream.close()
        
        # –û–±'—î–¥–Ω—É—î–º–æ —ñ –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ
        raw_audio = b''.join(frames)
        
        # Resample: 44100 ‚Üí 16000
        resampled = audioop.ratecv(
            raw_audio,
            2,
            1,
            self.device_rate,
            self.sample_rate,
            None
        )[0]
        
        return self._bytes_to_wav(resampled)
    
    def _bytes_to_wav(self, audio_bytes: bytes) -> bytes:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î raw audio bytes –≤ WAV"""
        if self.pa is None:
            raise RuntimeError("AudioManager –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π. –í–∏–∫–ª–∏—á—Ç–µ __init__ –∞–±–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å.")
        
        buffer = BytesIO()
        
        with wave.open(buffer, 'wb') as wf:
            wf.setnchannels(self.channels)
            wf.setsampwidth(self.pa.get_sample_size(self.format))
            wf.setframerate(self.sample_rate)  # 16000 Hz
            wf.writeframes(audio_bytes)
            
        return buffer.getvalue()
    
    def play_audio(self, audio_data: bytes) -> None:
        """–í—ñ–¥—Ç–≤–æ—Ä—é—î –∞—É–¥—ñ–æ (WAV –∞–±–æ MP3)"""
        print(f"üîä –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è {len(audio_data)} bytes...")
        
        if self.pa is None:
            print("‚ö†Ô∏è  PyAudio –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é aplay")
            self._play_with_aplay(audio_data)
            return
        
        try:
            from pydub import AudioSegment
            
            # –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç
            if audio_data[:4] == b'RIFF':
                # –¶–µ WAV
                audio = AudioSegment.from_wav(BytesIO(audio_data))
                print("   –§–æ—Ä–º–∞—Ç: WAV")
            else:
                # –¶–µ MP3
                audio = AudioSegment.from_mp3(BytesIO(audio_data))
                print("   –§–æ—Ä–º–∞—Ç: MP3")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ RAW –¥–ª—è PyAudio
            raw_data = audio.raw_data
            sample_width = audio.sample_width
            channels = audio.channels
            frame_rate = audio.frame_rate
            
            print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä–∏: {channels}ch, {frame_rate}Hz, {sample_width*8}bit")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ mono ‚Üí stereo –¥–ª—è ReSpeaker (—è–∫—â–æ —Ç—Ä–µ–±–∞)
            if channels == 1:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ pydub –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó
                audio = audio.set_channels(2)
                raw_data = audio.raw_data
                channels = 2
                print("   –ö–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–æ mono ‚Üí stereo")
            
            # –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ
            stream = self.pa.open(
                format=self.pa.get_format_from_width(sample_width),
                channels=channels,
                rate=frame_rate,
                output=True,
                output_device_index=self.output_device_index
            )
            
            # –ü–∏—à–µ–º–æ –ø–æ —á–∞–Ω–∫–∞—Ö
            chunk_size = self.chunk * sample_width * channels
            for i in range(0, len(raw_data), chunk_size):
                chunk = raw_data[i:i + chunk_size]
                stream.write(chunk)
            
            stream.stop_stream()
            stream.close()
            print("‚úÖ –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                    
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")
            import traceback
            traceback.print_exc()
    
    def _play_with_aplay(self, audio_data: bytes) -> None:
        """–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î aplay –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∞—É–¥—ñ–æ —è–∫ fallback"""
        try:
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∞—É–¥—ñ–æ —É —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            tmp_file = "/tmp/audio_fallback.wav"
            with open(tmp_file, 'wb') as f:
                f.write(audio_data)
                
            # –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ —á–µ—Ä–µ–∑ aplay
            subprocess.run(["aplay", tmp_file], check=False)
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
            os.unlink(tmp_file)
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —á–µ—Ä–µ–∑ aplay: {e}")

    def cleanup(self):
        """–ó–≤—ñ–ª—å–Ω—è—î —Ä–µ—Å—É—Ä—Å–∏"""
        if self.pa:
            self.pa.terminate()
            self.pa = None
