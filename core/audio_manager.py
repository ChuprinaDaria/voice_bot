"""
–ö–ª–∞—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑—ñ –∑–≤—É–∫–æ–º –Ω–∞ Raspberry Pi
- USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω –¥–ª—è –∑–∞–ø–∏—Å—É
- 3.5mm –∞—É–¥—ñ–æ –≤–∏—Ö—ñ–¥ –¥–ª—è –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
"""

import pyaudio
import wave
import audioop
from io import BytesIO
from typing import Optional
import time


class AudioManager:
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ –∑–∞–ø–∏—Å–æ–º —ñ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è–º"""
    
    def __init__(self):
        self.sample_rate = 16000  # 16kHz –¥–ª—è Whisper
        self.channels = 1  # mono
        self.chunk = 1024
        self.format = pyaudio.paInt16
        
        self.pa = pyaudio.PyAudio()
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞
        self.input_device_index = self._find_usb_microphone()
        
        if self.input_device_index is None:
            print("‚ö†Ô∏è  USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π.")
        else:
            print(f"‚úÖ USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω –∑–Ω–∞–π–¥–µ–Ω–æ: device {self.input_device_index}")
        
    def _find_usb_microphone(self) -> Optional[int]:
        """–®—É–∫–∞—î USB –º—ñ–∫—Ä–æ—Ñ–æ–Ω —Å–µ—Ä–µ–¥ –∞—É–¥—ñ–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤"""
        for i in range(self.pa.get_device_count()):
            info = self.pa.get_device_info_by_index(i)
            name = str(info.get('name', '')).lower()
            
            # –®—É–∫–∞—î–º–æ USB –≤ –Ω–∞–∑–≤—ñ —ñ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —â–æ —Ü–µ INPUT –ø—Ä–∏—Å—Ç—Ä—ñ–π
            max_input_channels = int(info.get('maxInputChannels', 0))
            if 'usb' in name and max_input_channels > 0:
                return i
                
        return None
        
    def record_audio(self, duration: int = 5) -> bytes:
        """–ó–∞–ø–∏—Å—É—î N —Å–µ–∫—É–Ω–¥ –∞—É–¥—ñ–æ –∑ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞"""
        print(f"üé§ –ó–∞–ø–∏—Å {duration} —Å–µ–∫—É–Ω–¥...")
        
        stream = self.pa.open(
            format=self.format,
            channels=self.channels,
            rate=self.sample_rate,
            input=True,
            input_device_index=self.input_device_index,
            frames_per_buffer=self.chunk
        )
        
        frames = []
        for _ in range(0, int(self.sample_rate / self.chunk * duration)):
            data = stream.read(self.chunk, exception_on_overflow=False)
            frames.append(data)
            
        stream.stop_stream()
        stream.close()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ WAV —Ñ–æ—Ä–º–∞—Ç
        return self._frames_to_wav(frames)
        
    def record_until_silence(
        self, 
        silence_threshold: int = 500,
        silence_duration: float = 1.5,
        max_duration: int = 10
    ) -> bytes:
        """
        –ó–∞–ø–∏—Å—É—î –ø–æ–∫–∏ –Ω–µ –±—É–¥–µ —Ç–∏—à–∞ –ø—Ä–æ—Ç—è–≥–æ–º silence_duration —Å–µ–∫—É–Ω–¥
        
        Args:
            silence_threshold: –ü–æ—Ä—ñ–≥ —Ç–∏—à—ñ (RMS amplitude)
            silence_duration: –°–∫—ñ–ª—å–∫–∏ —Å–µ–∫—É–Ω–¥ —Ç–∏—à—ñ = –∫—ñ–Ω–µ—Ü—å –∑–∞–ø–∏—Å—É
            max_duration: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –∑–∞–ø–∏—Å—É
        """
        print("üé§ –ó–∞–ø–∏—Å –¥–æ —Ç–∏—à—ñ...")
        
        stream = self.pa.open(
            format=self.format,
            channels=self.channels,
            rate=self.sample_rate,
            input=True,
            input_device_index=self.input_device_index,
            frames_per_buffer=self.chunk
        )
        
        frames = []
        silent_chunks = 0
        chunks_per_silence = int(self.sample_rate / self.chunk * silence_duration)
        max_chunks = int(self.sample_rate / self.chunk * max_duration)
        
        start_time = time.time()
        
        while len(frames) < max_chunks:
            data = stream.read(self.chunk, exception_on_overflow=False)
            frames.append(data)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä—ñ–≤–µ–Ω—å –∑–≤—É–∫—É (RMS)
            rms = audioop.rms(data, 2)  # 2 bytes per sample (paInt16)
            
            if rms < silence_threshold:
                silent_chunks += 1
            else:
                silent_chunks = 0
                
            # –Ø–∫—â–æ —Ç–∏—à–∞ –ø—Ä–æ—Ç—è–≥–æ–º silence_duration
            if silent_chunks > chunks_per_silence:
                print(f"üîá –¢–∏—à–∞ {silence_duration}s detected. –ó—É–ø–∏–Ω—è—é –∑–∞–ø–∏—Å.")
                break
                
        elapsed = time.time() - start_time
        print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {elapsed:.1f}s")
        
        stream.stop_stream()
        stream.close()
        
        return self._frames_to_wav(frames)
        
    def _frames_to_wav(self, frames: list) -> bytes:
        """–ö–æ–Ω–≤–µ—Ä—Ç—É—î —Å–ø–∏—Å–æ–∫ —Ñ—Ä–µ–π–º—ñ–≤ –≤ WAV bytes"""
        buffer = BytesIO()
        
        with wave.open(buffer, 'wb') as wf:
            wf.setnchannels(self.channels)
            wf.setsampwidth(self.pa.get_sample_size(self.format))
            wf.setframerate(self.sample_rate)
            wf.writeframes(b''.join(frames))
            
        return buffer.getvalue()
        
    def play_audio(self, audio_data: bytes) -> None:
        """
        –í—ñ–¥—Ç–≤–æ—Ä—é—î –∞—É–¥—ñ–æ —á–µ—Ä–µ–∑ 3.5mm –≤–∏—Ö—ñ–¥
        –ü—ñ–¥—Ç—Ä–∏–º—É—î WAV —ñ MP3 (—á–µ—Ä–µ–∑ pydub)
        """
        try:
            # –°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–∏—Ç–∏ —è–∫ WAV
            buffer = BytesIO(audio_data)
            
            with wave.open(buffer, 'rb') as wf:
                stream = self.pa.open(
                    format=self.pa.get_format_from_width(wf.getsampwidth()),
                    channels=wf.getnchannels(),
                    rate=wf.getframerate(),
                    output=True
                )
                
                # –ß–∏—Ç–∞—î–º–æ —ñ –≤—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ –ø–æ —á–∞–Ω–∫–∞—Ö
                data = wf.readframes(self.chunk)
                while data:
                    stream.write(data)
                    data = wf.readframes(self.chunk)
                    
                stream.stop_stream()
                stream.close()
                
        except wave.Error:
            # –Ø–∫—â–æ –Ω–µ WAV - –ø—Ä–æ–±—É—î–º–æ —á–µ—Ä–µ–∑ pydub (MP3)
            try:
                from pydub import AudioSegment  # type: ignore[import-not-found]
                from pydub.playback import play  # type: ignore[import-not-found]
                
                audio = AudioSegment.from_file(BytesIO(audio_data))
                play(audio)
                
            except Exception as e:
                print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è: {e}")
                
    def list_devices(self):
        """–í–∏–≤–æ–¥–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∞—É–¥—ñ–æ –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤ (–¥–ª—è –¥–µ–±–∞–≥—É)"""
        print("\n" + "=" * 60)
        print("üì° AUDIO DEVICES")
        print("=" * 60)
        
        for i in range(self.pa.get_device_count()):
            info = self.pa.get_device_info_by_index(i)
            print(f"\nDevice {i}:")
            print(f"  Name: {info.get('name')}")
            print(f"  Input channels: {info.get('maxInputChannels')}")
            print(f"  Output channels: {info.get('maxOutputChannels')}")
            print(f"  Sample rate: {info.get('defaultSampleRate')}")
            
        print("=" * 60 + "\n")
        
    def cleanup(self):
        """–ó–≤—ñ–ª—å–Ω–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤"""
        self.pa.terminate()


# –¢–µ—Å—Ç–æ–≤–∏–π –∑–∞–ø—É—Å–∫
if __name__ == "__main__":
    print("üéôÔ∏è  –¢–µ—Å—Ç Audio Manager")
    print("=" * 50)
    
    audio_manager = AudioManager()
    
    # –ü–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó
    audio_manager.list_devices()
    
    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å—É
    print("\n[TEST 1] –ó–∞–ø–∏—Å 3 —Å–µ–∫—É–Ω–¥–∏...")
    audio_data = audio_manager.record_audio(duration=3)
    print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {len(audio_data)} bytes")
    
    # –¢–µ—Å—Ç –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è
    print("\n[TEST 2] –í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è...")
    audio_manager.play_audio(audio_data)
    
    # –¢–µ—Å—Ç –∑–∞–ø–∏—Å—É –¥–æ —Ç–∏—à—ñ
    print("\n[TEST 3] –ó–∞–ø–∏—Å –¥–æ —Ç–∏—à—ñ (—Å–∫–∞–∂–∏ —â–æ—Å—å —ñ –∑–∞–º–æ–≤–∫–Ω–∏)...")
    audio_data = audio_manager.record_until_silence(
        silence_threshold=500,
        silence_duration=2.0,
        max_duration=10
    )
    print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ {len(audio_data)} bytes")
    
    audio_manager.cleanup()
    print("\n‚úÖ –¢–µ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
