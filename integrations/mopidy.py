"""
–Ü–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—è –∑ Mopidy –º—É–∑–∏—á–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º
Mopidy –∫–µ—Ä—É—î Spotify, YouTube Music, –ª–æ–∫–∞–ª—å–Ω–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏ —á–µ—Ä–µ–∑ HTTP API
"""

from __future__ import annotations

from typing import Optional, Tuple, List, Dict, Any
import requests
import json


class MopidyManager:
    """–ö–µ—Ä—É–≤–∞–Ω–Ω—è Mopidy –º—É–∑–∏—á–Ω–∏–º —Å–µ—Ä–≤–µ—Ä–æ–º —á–µ—Ä–µ–∑ HTTP API"""

    def __init__(self, host: str = "127.0.0.1", port: int = 6680) -> None:
        self.base_url = f"http://{host}:{port}/mopidy/rpc"
        self.timeout = 30  # –ó–±—ñ–ª—å—à–µ–Ω–æ –¥–ª—è YouTube –ø–æ—à—É–∫—É

    def _rpc_call(self, method: str, params: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]]:
        """–í–∏–∫–æ–Ω—É—î JSON-RPC –≤–∏–∫–ª–∏–∫ –¥–æ Mopidy"""
        payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": method,
        }
        if params:
            payload["params"] = params

        try:
            response = requests.post(
                self.base_url,
                json=payload,
                timeout=self.timeout,
                headers={"Content-Type": "application/json"}
            )
            response.raise_for_status()
            result = response.json()
            return result.get("result")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ Mopidy RPC: {e}")
            return None
        except json.JSONDecodeError as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON: {e}")
            return None

    def is_running(self) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π Mopidy"""
        version = self._rpc_call("core.get_version")
        return version is not None

    def search(self, query: str, source: str = "any") -> List[Dict[str, Any]]:
        """
        –®—É–∫–∞—î —Ç—Ä–µ–∫–∏
        
        Args:
            query: –ü–æ—à—É–∫–æ–≤–∏–π –∑–∞–ø–∏—Ç
            source: spotify, youtube, local, –∞–±–æ any
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ç—Ä–µ–∫—ñ–≤
        """
        uris = None
        if source == "spotify":
            uris = ["spotify:"]
        elif source == "youtube":
            uris = ["yt:"]
        elif source == "local":
            uris = ["local:"]

        params: Dict[str, Any] = {"query": {"any": [query]}}
        if uris:
            params["uris"] = uris

        result = self._rpc_call("core.library.search", params)
        
        if not result:
            return []

        # –ó–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Ç—Ä–µ–∫–∏ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        tracks: List[Dict[str, Any]] = []
        if isinstance(result, list):
            for search_result in result:
                if isinstance(search_result, dict) and "tracks" in search_result:
                    result_tracks = search_result.get("tracks", [])
                    if isinstance(result_tracks, list):
                        tracks.extend(result_tracks)
        
        return tracks

    def play_track(self, track_name: str, source: str = "any") -> Tuple[bool, str]:
        """
        –®—É–∫–∞—î —ñ –≤—ñ–¥—Ç–≤–æ—Ä—é—î —Ç—Ä–µ–∫
        
        Args:
            track_name: –ù–∞–∑–≤–∞ —Ç—Ä–µ–∫—É/–≤–∏–∫–æ–Ω–∞–≤—Ü—è
            source: spotify, youtube, local, –∞–±–æ any
        """
        if not self.is_running():
            return False, "‚ùå Mopidy –Ω–µ –∑–∞–ø—É—â–µ–Ω–∏–π. –ó–∞–ø—É—Å—Ç–∏: sudo systemctl start mopidy"

        # –®—É–∫–∞—î–º–æ —Ç—Ä–µ–∫
        tracks = self.search(track_name, source)
        
        if not tracks:
            return False, f"‚ùå –¢—Ä–µ–∫ '{track_name}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"

        # –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        track = tracks[0]
        track_uri = track.get("uri")
        
        if not track_uri:
            return False, f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ URI —Ç—Ä–µ–∫—É"

        # –û—á–∏—â–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –ø–ª–µ–π–ª–∏—Å—Ç
        self._rpc_call("core.tracklist.clear")

        # –î–æ–¥–∞—î–º–æ —Ç—Ä–µ–∫
        add_result = self._rpc_call("core.tracklist.add", {"uris": [track_uri]})
        
        if not add_result:
            return False, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ç—Ä–µ–∫ –¥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞"

        # –í—ñ–¥—Ç–≤–æ—Ä—é—î–º–æ
        play_result = self._rpc_call("core.playback.play")
        
        if play_result is None:
            return False, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è"

        # –§–æ—Ä–º–∞—Ç—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
        track_name_result = track.get("name", track_name)
        artists = track.get("artists", [])
        artist_name = artists[0].get("name", "Unknown") if artists else "Unknown"
        
        return True, f"‚ñ∂Ô∏è –ì—Ä–∞—î: {track_name_result} - {artist_name}"

    def pause(self) -> Tuple[bool, str]:
        """–°—Ç–∞–≤–∏—Ç—å –ø–∞—É–∑—É"""
        result = self._rpc_call("core.playback.pause")
        if result is not None:
            return True, "‚è∏Ô∏è –ü–∞—É–∑–∞"
        return False, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –Ω–∞ –ø–∞—É–∑—É"

    def resume(self) -> Tuple[bool, str]:
        """–í—ñ–¥–Ω–æ–≤–ª—é—î –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è"""
        result = self._rpc_call("core.playback.resume")
        if result is not None:
            return True, "‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–≤–∂—É—é"
        return False, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–Ω–æ–≤–∏—Ç–∏ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è"

    def stop(self) -> Tuple[bool, str]:
        """–ó—É–ø–∏–Ω—è—î –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è"""
        result = self._rpc_call("core.playback.stop")
        if result is not None:
            return True, "‚èπÔ∏è –ó—É–ø–∏–Ω–µ–Ω–æ"
        return False, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑—É–ø–∏–Ω–∏—Ç–∏"

    def next_track(self) -> Tuple[bool, str]:
        """–ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–µ–∫"""
        result = self._rpc_call("core.playback.next")
        if result is not None:
            return True, "‚è≠Ô∏è –ù–∞—Å—Ç—É–ø–Ω–∏–π —Ç—Ä–µ–∫"
        return False, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏"

    def previous_track(self) -> Tuple[bool, str]:
        """–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç—Ä–µ–∫"""
        result = self._rpc_call("core.playback.previous")
        if result is not None:
            return True, "‚èÆÔ∏è –ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç—Ä–µ–∫"
        return False, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–º–∫–Ω—É—Ç–∏"

    def get_current_track(self) -> Optional[Dict[str, Any]]:
        """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ç—Ä–µ–∫"""
        return self._rpc_call("core.playback.get_current_track")

    def set_volume(self, volume: int) -> Tuple[bool, str]:
        """
        –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –≥—É—á–Ω—ñ—Å—Ç—å
        
        Args:
            volume: 0-100
        """
        volume = max(0, min(100, volume))  # –û–±–º–µ–∂—É—î–º–æ 0-100
        result = self._rpc_call("core.mixer.set_volume", {"volume": volume})
        if result is not None:
            return True, f"üîä –ì—É—á–Ω—ñ—Å—Ç—å: {volume}%"
        return False, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–º—ñ–Ω–∏—Ç–∏ –≥—É—á–Ω—ñ—Å—Ç—å"


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
mopidy_manager = MopidyManager()

